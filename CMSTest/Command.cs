// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace command {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Command {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_command_SecurityCommand__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::command.SecurityCommand, global::command.SecurityCommand.Builder> internal__static_command_SecurityCommand__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_command_Command__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::command.Command, global::command.Command.Builder> internal__static_command_Command__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Command() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Cg1Db21tYW5kLnByb3RvEgdjb21tYW5kIocBCg9TZWN1cml0eUNvbW1hbmQS" + 
            "OgoEdHlwZRgBIAIoDjIsLmNvbW1hbmQuU2VjdXJpdHlDb21tYW5kLlNlY3Vy" + 
            "aXR5Q29tbWFuZFR5cGUSDAoEVVVJRBgCIAIoCSIqChNTZWN1cml0eUNvbW1h" + 
            "bmRUeXBlEggKBEpPSU4QABIJCgVMRUFWRRABIqEBCgdDb21tYW5kEjQKBHR5" + 
            "cGUYASACKA4yHC5jb21tYW5kLkNvbW1hbmQuQ29tbWFuZFR5cGU6CFNFQ1VS" + 
            "SVRZEhAKCGZyb21VVUlEGAIgAigJEjEKD3NlY3VyaXR5Q29tbWFuZBgDIAEo" + 
            "CzIYLmNvbW1hbmQuU2VjdXJpdHlDb21tYW5kIhsKC0NvbW1hbmRUeXBlEgwK" + 
            "CFNFQ1VSSVRZEAA=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_command_SecurityCommand__Descriptor = Descriptor.MessageTypes[0];
          internal__static_command_SecurityCommand__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::command.SecurityCommand, global::command.SecurityCommand.Builder>(internal__static_command_SecurityCommand__Descriptor,
                  new string[] { "Type", "UUID", });
          internal__static_command_Command__Descriptor = Descriptor.MessageTypes[1];
          internal__static_command_Command__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::command.Command, global::command.Command.Builder>(internal__static_command_Command__Descriptor,
                  new string[] { "Type", "FromUUID", "SecurityCommand", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SecurityCommand : pb::GeneratedMessage<SecurityCommand, SecurityCommand.Builder> {
    private SecurityCommand() { }
    private static readonly SecurityCommand defaultInstance = new SecurityCommand().MakeReadOnly();
    private static readonly string[] _securityCommandFieldNames = new string[] { "UUID", "type" };
    private static readonly uint[] _securityCommandFieldTags = new uint[] { 18, 8 };
    public static SecurityCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SecurityCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SecurityCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::command.Proto.Command.internal__static_command_SecurityCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SecurityCommand, SecurityCommand.Builder> InternalFieldAccessors {
      get { return global::command.Proto.Command.internal__static_command_SecurityCommand__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum SecurityCommandType {
        JOIN = 0,
        LEAVE = 1,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::command.SecurityCommand.Types.SecurityCommandType type_ = global::command.SecurityCommand.Types.SecurityCommandType.JOIN;
    public bool HasType {
      get { return hasType; }
    }
    public global::command.SecurityCommand.Types.SecurityCommandType Type {
      get { return type_; }
    }
    
    public const int UUIDFieldNumber = 2;
    private bool hasUUID;
    private string uUID_ = "";
    public bool HasUUID {
      get { return hasUUID; }
    }
    public string UUID {
      get { return uUID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasUUID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _securityCommandFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[1], (int) Type, Type);
      }
      if (hasUUID) {
        output.WriteString(2, field_names[0], UUID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasUUID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UUID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SecurityCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SecurityCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SecurityCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SecurityCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SecurityCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SecurityCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SecurityCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SecurityCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SecurityCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SecurityCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SecurityCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SecurityCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SecurityCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SecurityCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SecurityCommand result;
      
      private SecurityCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          SecurityCommand original = result;
          result = new SecurityCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SecurityCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::command.SecurityCommand.Descriptor; }
      }
      
      public override SecurityCommand DefaultInstanceForType {
        get { return global::command.SecurityCommand.DefaultInstance; }
      }
      
      public override SecurityCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SecurityCommand) {
          return MergeFrom((SecurityCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SecurityCommand other) {
        if (other == global::command.SecurityCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUUID) {
          UUID = other.UUID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_securityCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _securityCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasUUID = input.ReadString(ref result.uUID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::command.SecurityCommand.Types.SecurityCommandType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::command.SecurityCommand.Types.SecurityCommandType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::command.SecurityCommand.Types.SecurityCommandType.JOIN;
        return this;
      }
      
      public bool HasUUID {
        get { return result.hasUUID; }
      }
      public string UUID {
        get { return result.UUID; }
        set { SetUUID(value); }
      }
      public Builder SetUUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUUID = true;
        result.uUID_ = value;
        return this;
      }
      public Builder ClearUUID() {
        PrepareBuilder();
        result.hasUUID = false;
        result.uUID_ = "";
        return this;
      }
    }
    static SecurityCommand() {
      object.ReferenceEquals(global::command.Proto.Command.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command : pb::GeneratedMessage<Command, Command.Builder> {
    private Command() { }
    private static readonly Command defaultInstance = new Command().MakeReadOnly();
    private static readonly string[] _commandFieldNames = new string[] { "fromUUID", "securityCommand", "type" };
    private static readonly uint[] _commandFieldTags = new uint[] { 18, 26, 8 };
    public static Command DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::command.Proto.Command.internal__static_command_Command__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command, Command.Builder> InternalFieldAccessors {
      get { return global::command.Proto.Command.internal__static_command_Command__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum CommandType {
        SECURITY = 0,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::command.Command.Types.CommandType type_ = global::command.Command.Types.CommandType.SECURITY;
    public bool HasType {
      get { return hasType; }
    }
    public global::command.Command.Types.CommandType Type {
      get { return type_; }
    }
    
    public const int FromUUIDFieldNumber = 2;
    private bool hasFromUUID;
    private string fromUUID_ = "";
    public bool HasFromUUID {
      get { return hasFromUUID; }
    }
    public string FromUUID {
      get { return fromUUID_; }
    }
    
    public const int SecurityCommandFieldNumber = 3;
    private bool hasSecurityCommand;
    private global::command.SecurityCommand securityCommand_;
    public bool HasSecurityCommand {
      get { return hasSecurityCommand; }
    }
    public global::command.SecurityCommand SecurityCommand {
      get { return securityCommand_ ?? global::command.SecurityCommand.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasFromUUID) return false;
        if (HasSecurityCommand) {
          if (!SecurityCommand.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasFromUUID) {
        output.WriteString(2, field_names[0], FromUUID);
      }
      if (hasSecurityCommand) {
        output.WriteMessage(3, field_names[1], SecurityCommand);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasFromUUID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FromUUID);
        }
        if (hasSecurityCommand) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SecurityCommand);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command result;
      
      private Command PrepareBuilder() {
        if (resultIsReadOnly) {
          Command original = result;
          result = new Command();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::command.Command.Descriptor; }
      }
      
      public override Command DefaultInstanceForType {
        get { return global::command.Command.DefaultInstance; }
      }
      
      public override Command BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command) {
          return MergeFrom((Command) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command other) {
        if (other == global::command.Command.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasFromUUID) {
          FromUUID = other.FromUUID;
        }
        if (other.HasSecurityCommand) {
          MergeSecurityCommand(other.SecurityCommand);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasFromUUID = input.ReadString(ref result.fromUUID_);
              break;
            }
            case 26: {
              global::command.SecurityCommand.Builder subBuilder = global::command.SecurityCommand.CreateBuilder();
              if (result.hasSecurityCommand) {
                subBuilder.MergeFrom(SecurityCommand);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SecurityCommand = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::command.Command.Types.CommandType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::command.Command.Types.CommandType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::command.Command.Types.CommandType.SECURITY;
        return this;
      }
      
      public bool HasFromUUID {
        get { return result.hasFromUUID; }
      }
      public string FromUUID {
        get { return result.FromUUID; }
        set { SetFromUUID(value); }
      }
      public Builder SetFromUUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUUID = true;
        result.fromUUID_ = value;
        return this;
      }
      public Builder ClearFromUUID() {
        PrepareBuilder();
        result.hasFromUUID = false;
        result.fromUUID_ = "";
        return this;
      }
      
      public bool HasSecurityCommand {
       get { return result.hasSecurityCommand; }
      }
      public global::command.SecurityCommand SecurityCommand {
        get { return result.SecurityCommand; }
        set { SetSecurityCommand(value); }
      }
      public Builder SetSecurityCommand(global::command.SecurityCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecurityCommand = true;
        result.securityCommand_ = value;
        return this;
      }
      public Builder SetSecurityCommand(global::command.SecurityCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSecurityCommand = true;
        result.securityCommand_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSecurityCommand(global::command.SecurityCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSecurityCommand &&
            result.securityCommand_ != global::command.SecurityCommand.DefaultInstance) {
            result.securityCommand_ = global::command.SecurityCommand.CreateBuilder(result.securityCommand_).MergeFrom(value).BuildPartial();
        } else {
          result.securityCommand_ = value;
        }
        result.hasSecurityCommand = true;
        return this;
      }
      public Builder ClearSecurityCommand() {
        PrepareBuilder();
        result.hasSecurityCommand = false;
        result.securityCommand_ = null;
        return this;
      }
    }
    static Command() {
      object.ReferenceEquals(global::command.Proto.Command.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
