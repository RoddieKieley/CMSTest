// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DualStick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DualStick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DualStick {

namespace {

const ::google::protobuf::Descriptor* PbDualStick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbDualStick_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DualStick_2eproto() {
  protobuf_AddDesc_DualStick_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DualStick.proto");
  GOOGLE_CHECK(file != NULL);
  PbDualStick_descriptor_ = file->message_type(0);
  static const int PbDualStick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDualStick, pbv2move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDualStick, pbv2shoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDualStick, uuid_),
  };
  PbDualStick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbDualStick_descriptor_,
      PbDualStick::default_instance_,
      PbDualStick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDualStick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDualStick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbDualStick));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DualStick_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbDualStick_descriptor_, &PbDualStick::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DualStick_2eproto() {
  delete PbDualStick::default_instance_;
  delete PbDualStick_reflection_;
}

void protobuf_AddDesc_DualStick_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::box2d::protobuf_AddDesc_box2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017DualStick.proto\022\tDualStick\032\013box2d.prot"
    "o\"^\n\013PbDualStick\022\037\n\010pbv2Move\030\001 \002(\0132\r.box"
    "2d.PbVec2\022 \n\tpbv2Shoot\030\002 \002(\0132\r.box2d.PbV"
    "ec2\022\014\n\004UUID\030\003 \002(\t", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DualStick.proto", &protobuf_RegisterTypes);
  PbDualStick::default_instance_ = new PbDualStick();
  PbDualStick::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DualStick_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DualStick_2eproto {
  StaticDescriptorInitializer_DualStick_2eproto() {
    protobuf_AddDesc_DualStick_2eproto();
  }
} static_descriptor_initializer_DualStick_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbDualStick::kPbv2MoveFieldNumber;
const int PbDualStick::kPbv2ShootFieldNumber;
const int PbDualStick::kUUIDFieldNumber;
#endif  // !_MSC_VER

PbDualStick::PbDualStick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbDualStick::InitAsDefaultInstance() {
  pbv2move_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  pbv2shoot_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
}

PbDualStick::PbDualStick(const PbDualStick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbDualStick::SharedCtor() {
  _cached_size_ = 0;
  pbv2move_ = NULL;
  pbv2shoot_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbDualStick::~PbDualStick() {
  SharedDtor();
}

void PbDualStick::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete pbv2move_;
    delete pbv2shoot_;
  }
}

void PbDualStick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbDualStick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbDualStick_descriptor_;
}

const PbDualStick& PbDualStick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DualStick_2eproto();
  return *default_instance_;
}

PbDualStick* PbDualStick::default_instance_ = NULL;

PbDualStick* PbDualStick::New() const {
  return new PbDualStick;
}

void PbDualStick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbv2move()) {
      if (pbv2move_ != NULL) pbv2move_->::box2d::PbVec2::Clear();
    }
    if (has_pbv2shoot()) {
      if (pbv2shoot_ != NULL) pbv2shoot_->::box2d::PbVec2::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbDualStick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .box2d.PbVec2 pbv2Move = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbv2move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbv2Shoot;
        break;
      }

      // required .box2d.PbVec2 pbv2Shoot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbv2Shoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbv2shoot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UUID;
        break;
      }

      // required string UUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbDualStick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .box2d.PbVec2 pbv2Move = 1;
  if (has_pbv2move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbv2move(), output);
  }

  // required .box2d.PbVec2 pbv2Shoot = 2;
  if (has_pbv2shoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbv2shoot(), output);
  }

  // required string UUID = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbDualStick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .box2d.PbVec2 pbv2Move = 1;
  if (has_pbv2move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbv2move(), target);
  }

  // required .box2d.PbVec2 pbv2Shoot = 2;
  if (has_pbv2shoot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbv2shoot(), target);
  }

  // required string UUID = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbDualStick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .box2d.PbVec2 pbv2Move = 1;
    if (has_pbv2move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbv2move());
    }

    // required .box2d.PbVec2 pbv2Shoot = 2;
    if (has_pbv2shoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbv2shoot());
    }

    // required string UUID = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbDualStick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbDualStick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbDualStick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbDualStick::MergeFrom(const PbDualStick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbv2move()) {
      mutable_pbv2move()->::box2d::PbVec2::MergeFrom(from.pbv2move());
    }
    if (from.has_pbv2shoot()) {
      mutable_pbv2shoot()->::box2d::PbVec2::MergeFrom(from.pbv2shoot());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbDualStick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbDualStick::CopyFrom(const PbDualStick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDualStick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pbv2move()) {
    if (!this->pbv2move().IsInitialized()) return false;
  }
  if (has_pbv2shoot()) {
    if (!this->pbv2shoot().IsInitialized()) return false;
  }
  return true;
}

void PbDualStick::Swap(PbDualStick* other) {
  if (other != this) {
    std::swap(pbv2move_, other->pbv2move_);
    std::swap(pbv2shoot_, other->pbv2shoot_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbDualStick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbDualStick_descriptor_;
  metadata.reflection = PbDualStick_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DualStick

// @@protoc_insertion_point(global_scope)
