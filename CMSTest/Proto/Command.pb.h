// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#ifndef PROTOBUF_Command_2eproto__INCLUDED
#define PROTOBUF_Command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Command_2eproto();
void protobuf_AssignDesc_Command_2eproto();
void protobuf_ShutdownFile_Command_2eproto();

class SecurityCommand;
class Command;

enum SecurityCommand_SecurityCommandType {
  SecurityCommand_SecurityCommandType_JOIN = 0,
  SecurityCommand_SecurityCommandType_LEAVE = 1
};
bool SecurityCommand_SecurityCommandType_IsValid(int value);
const SecurityCommand_SecurityCommandType SecurityCommand_SecurityCommandType_SecurityCommandType_MIN = SecurityCommand_SecurityCommandType_JOIN;
const SecurityCommand_SecurityCommandType SecurityCommand_SecurityCommandType_SecurityCommandType_MAX = SecurityCommand_SecurityCommandType_LEAVE;
const int SecurityCommand_SecurityCommandType_SecurityCommandType_ARRAYSIZE = SecurityCommand_SecurityCommandType_SecurityCommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SecurityCommand_SecurityCommandType_descriptor();
inline const ::std::string& SecurityCommand_SecurityCommandType_Name(SecurityCommand_SecurityCommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityCommand_SecurityCommandType_descriptor(), value);
}
inline bool SecurityCommand_SecurityCommandType_Parse(
    const ::std::string& name, SecurityCommand_SecurityCommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityCommand_SecurityCommandType>(
    SecurityCommand_SecurityCommandType_descriptor(), name, value);
}
enum Command_CommandType {
  Command_CommandType_SECURITY = 0
};
bool Command_CommandType_IsValid(int value);
const Command_CommandType Command_CommandType_CommandType_MIN = Command_CommandType_SECURITY;
const Command_CommandType Command_CommandType_CommandType_MAX = Command_CommandType_SECURITY;
const int Command_CommandType_CommandType_ARRAYSIZE = Command_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor();
inline const ::std::string& Command_CommandType_Name(Command_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_CommandType_descriptor(), value);
}
inline bool Command_CommandType_Parse(
    const ::std::string& name, Command_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_CommandType>(
    Command_CommandType_descriptor(), name, value);
}
// ===================================================================

class SecurityCommand : public ::google::protobuf::Message {
 public:
  SecurityCommand();
  virtual ~SecurityCommand();

  SecurityCommand(const SecurityCommand& from);

  inline SecurityCommand& operator=(const SecurityCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityCommand& default_instance();

  void Swap(SecurityCommand* other);

  // implements Message ----------------------------------------------

  SecurityCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecurityCommand& from);
  void MergeFrom(const SecurityCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SecurityCommand_SecurityCommandType SecurityCommandType;
  static const SecurityCommandType JOIN = SecurityCommand_SecurityCommandType_JOIN;
  static const SecurityCommandType LEAVE = SecurityCommand_SecurityCommandType_LEAVE;
  static inline bool SecurityCommandType_IsValid(int value) {
    return SecurityCommand_SecurityCommandType_IsValid(value);
  }
  static const SecurityCommandType SecurityCommandType_MIN =
    SecurityCommand_SecurityCommandType_SecurityCommandType_MIN;
  static const SecurityCommandType SecurityCommandType_MAX =
    SecurityCommand_SecurityCommandType_SecurityCommandType_MAX;
  static const int SecurityCommandType_ARRAYSIZE =
    SecurityCommand_SecurityCommandType_SecurityCommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SecurityCommandType_descriptor() {
    return SecurityCommand_SecurityCommandType_descriptor();
  }
  static inline const ::std::string& SecurityCommandType_Name(SecurityCommandType value) {
    return SecurityCommand_SecurityCommandType_Name(value);
  }
  static inline bool SecurityCommandType_Parse(const ::std::string& name,
      SecurityCommandType* value) {
    return SecurityCommand_SecurityCommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.SecurityCommand.SecurityCommandType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::SecurityCommand_SecurityCommandType type() const;
  inline void set_type(::command::SecurityCommand_SecurityCommandType value);

  // optional string UUID = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:command.SecurityCommand)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Command_2eproto();
  friend void protobuf_AssignDesc_Command_2eproto();
  friend void protobuf_ShutdownFile_Command_2eproto();

  void InitAsDefaultInstance();
  static SecurityCommand* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Command_CommandType CommandType;
  static const CommandType SECURITY = Command_CommandType_SECURITY;
  static inline bool CommandType_IsValid(int value) {
    return Command_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Command_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Command_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Command_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Command_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Command_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Command_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.Command.CommandType type = 1 [default = SECURITY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::Command_CommandType type() const;
  inline void set_type(::command::Command_CommandType value);

  // optional .command.SecurityCommand securityCommand = 3;
  inline bool has_securitycommand() const;
  inline void clear_securitycommand();
  static const int kSecurityCommandFieldNumber = 3;
  inline const ::command::SecurityCommand& securitycommand() const;
  inline ::command::SecurityCommand* mutable_securitycommand();
  inline ::command::SecurityCommand* release_securitycommand();
  inline void set_allocated_securitycommand(::command::SecurityCommand* securitycommand);

  // @@protoc_insertion_point(class_scope:command.Command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_securitycommand();
  inline void clear_has_securitycommand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::command::SecurityCommand* securitycommand_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Command_2eproto();
  friend void protobuf_AssignDesc_Command_2eproto();
  friend void protobuf_ShutdownFile_Command_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// SecurityCommand

// required .command.SecurityCommand.SecurityCommandType type = 1;
inline bool SecurityCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::SecurityCommand_SecurityCommandType SecurityCommand::type() const {
  return static_cast< ::command::SecurityCommand_SecurityCommandType >(type_);
}
inline void SecurityCommand::set_type(::command::SecurityCommand_SecurityCommandType value) {
  assert(::command::SecurityCommand_SecurityCommandType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string UUID = 2;
inline bool SecurityCommand::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityCommand::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityCommand::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityCommand::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& SecurityCommand::uuid() const {
  return *uuid_;
}
inline void SecurityCommand::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void SecurityCommand::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void SecurityCommand::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecurityCommand::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* SecurityCommand::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SecurityCommand::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Command

// required .command.Command.CommandType type = 1 [default = SECURITY];
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::Command_CommandType Command::type() const {
  return static_cast< ::command::Command_CommandType >(type_);
}
inline void Command::set_type(::command::Command_CommandType value) {
  assert(::command::Command_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .command.SecurityCommand securityCommand = 3;
inline bool Command::has_securitycommand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_securitycommand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_securitycommand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_securitycommand() {
  if (securitycommand_ != NULL) securitycommand_->::command::SecurityCommand::Clear();
  clear_has_securitycommand();
}
inline const ::command::SecurityCommand& Command::securitycommand() const {
  return securitycommand_ != NULL ? *securitycommand_ : *default_instance_->securitycommand_;
}
inline ::command::SecurityCommand* Command::mutable_securitycommand() {
  set_has_securitycommand();
  if (securitycommand_ == NULL) securitycommand_ = new ::command::SecurityCommand;
  return securitycommand_;
}
inline ::command::SecurityCommand* Command::release_securitycommand() {
  clear_has_securitycommand();
  ::command::SecurityCommand* temp = securitycommand_;
  securitycommand_ = NULL;
  return temp;
}
inline void Command::set_allocated_securitycommand(::command::SecurityCommand* securitycommand) {
  delete securitycommand_;
  securitycommand_ = securitycommand;
  if (securitycommand) {
    set_has_securitycommand();
  } else {
    clear_has_securitycommand();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::SecurityCommand_SecurityCommandType>() {
  return ::command::SecurityCommand_SecurityCommandType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::Command_CommandType>() {
  return ::command::Command_CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Command_2eproto__INCLUDED
