// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommandBuffer.proto

#include "CommandBuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_RawInputCommandBuffer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_RawInputCommandBuffer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RawInputCommandBuffer;
}  // namespace protobuf_RawInputCommandBuffer_2eproto
namespace protobuf_SecurityCommandBuffer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_SecurityCommandBuffer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SecurityCommandBuffer;
}  // namespace protobuf_SecurityCommandBuffer_2eproto
namespace usx {
namespace geofactions {
class CommandBufferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommandBuffer>
      _instance;
} _CommandBuffer_default_instance_;
}  // namespace geofactions
}  // namespace usx
namespace protobuf_CommandBuffer_2eproto {
static void InitDefaultsCommandBuffer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usx::geofactions::_CommandBuffer_default_instance_;
    new (ptr) ::usx::geofactions::CommandBuffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usx::geofactions::CommandBuffer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CommandBuffer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommandBuffer}, {
      &protobuf_SecurityCommandBuffer_2eproto::scc_info_SecurityCommandBuffer.base,
      &protobuf_RawInputCommandBuffer_2eproto::scc_info_RawInputCommandBuffer.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CommandBuffer.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::usx::geofactions::CommandBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::usx::geofactions::CommandBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::usx::geofactions::CommandBuffer, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::usx::geofactions::CommandBuffer, securitycommandbuffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::usx::geofactions::CommandBuffer, rawinputcommandbuffer_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::usx::geofactions::CommandBuffer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::usx::geofactions::_CommandBuffer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "CommandBuffer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023CommandBuffer.proto\022\017usx.geofactions\032\033"
      "SecurityCommandBuffer.proto\032\033RawInputCom"
      "mandBuffer.proto\"\244\002\n\rCommandBuffer\022G\n\004ty"
      "pe\030\001 \002(\01620.usx.geofactions.CommandBuffer"
      ".CommandBufferType:\007UNKNOWN\022E\n\025securityC"
      "ommandBuffer\030\002 \001(\0132&.usx.geofactions.Sec"
      "urityCommandBuffer\022E\n\025rawInputCommandBuf"
      "fer\030\003 \001(\0132&.usx.geofactions.RawInputComm"
      "andBuffer\"<\n\021CommandBufferType\022\013\n\007UNKNOW"
      "N\020\000\022\014\n\010SECURITY\020\001\022\014\n\010RAWINPUT\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommandBuffer.proto", &protobuf_RegisterTypes);
  ::protobuf_SecurityCommandBuffer_2eproto::AddDescriptors();
  ::protobuf_RawInputCommandBuffer_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_CommandBuffer_2eproto
namespace usx {
namespace geofactions {
const ::google::protobuf::EnumDescriptor* CommandBuffer_CommandBufferType_descriptor() {
  protobuf_CommandBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommandBuffer_2eproto::file_level_enum_descriptors[0];
}
bool CommandBuffer_CommandBufferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommandBuffer_CommandBufferType CommandBuffer::UNKNOWN;
const CommandBuffer_CommandBufferType CommandBuffer::SECURITY;
const CommandBuffer_CommandBufferType CommandBuffer::RAWINPUT;
const CommandBuffer_CommandBufferType CommandBuffer::CommandBufferType_MIN;
const CommandBuffer_CommandBufferType CommandBuffer::CommandBufferType_MAX;
const int CommandBuffer::CommandBufferType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CommandBuffer::InitAsDefaultInstance() {
  ::usx::geofactions::_CommandBuffer_default_instance_._instance.get_mutable()->securitycommandbuffer_ = const_cast< ::usx::geofactions::SecurityCommandBuffer*>(
      ::usx::geofactions::SecurityCommandBuffer::internal_default_instance());
  ::usx::geofactions::_CommandBuffer_default_instance_._instance.get_mutable()->rawinputcommandbuffer_ = const_cast< ::usx::geofactions::RawInputCommandBuffer*>(
      ::usx::geofactions::RawInputCommandBuffer::internal_default_instance());
}
void CommandBuffer::clear_securitycommandbuffer() {
  if (securitycommandbuffer_ != NULL) securitycommandbuffer_->Clear();
  clear_has_securitycommandbuffer();
}
void CommandBuffer::clear_rawinputcommandbuffer() {
  if (rawinputcommandbuffer_ != NULL) rawinputcommandbuffer_->Clear();
  clear_has_rawinputcommandbuffer();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandBuffer::kTypeFieldNumber;
const int CommandBuffer::kSecurityCommandBufferFieldNumber;
const int CommandBuffer::kRawInputCommandBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandBuffer::CommandBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_CommandBuffer_2eproto::scc_info_CommandBuffer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:usx.geofactions.CommandBuffer)
}
CommandBuffer::CommandBuffer(const CommandBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_securitycommandbuffer()) {
    securitycommandbuffer_ = new ::usx::geofactions::SecurityCommandBuffer(*from.securitycommandbuffer_);
  } else {
    securitycommandbuffer_ = NULL;
  }
  if (from.has_rawinputcommandbuffer()) {
    rawinputcommandbuffer_ = new ::usx::geofactions::RawInputCommandBuffer(*from.rawinputcommandbuffer_);
  } else {
    rawinputcommandbuffer_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:usx.geofactions.CommandBuffer)
}

void CommandBuffer::SharedCtor() {
  ::memset(&securitycommandbuffer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&securitycommandbuffer_)) + sizeof(type_));
}

CommandBuffer::~CommandBuffer() {
  // @@protoc_insertion_point(destructor:usx.geofactions.CommandBuffer)
  SharedDtor();
}

void CommandBuffer::SharedDtor() {
  if (this != internal_default_instance()) delete securitycommandbuffer_;
  if (this != internal_default_instance()) delete rawinputcommandbuffer_;
}

void CommandBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommandBuffer::descriptor() {
  ::protobuf_CommandBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_CommandBuffer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandBuffer& CommandBuffer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_CommandBuffer_2eproto::scc_info_CommandBuffer.base);
  return *internal_default_instance();
}


void CommandBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:usx.geofactions.CommandBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(securitycommandbuffer_ != NULL);
      securitycommandbuffer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rawinputcommandbuffer_ != NULL);
      rawinputcommandbuffer_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommandBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usx.geofactions.CommandBuffer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .usx.geofactions.CommandBuffer.CommandBufferType type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usx::geofactions::CommandBuffer_CommandBufferType_IsValid(value)) {
            set_type(static_cast< ::usx::geofactions::CommandBuffer_CommandBufferType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usx.geofactions.SecurityCommandBuffer securityCommandBuffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_securitycommandbuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usx.geofactions.RawInputCommandBuffer rawInputCommandBuffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rawinputcommandbuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usx.geofactions.CommandBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usx.geofactions.CommandBuffer)
  return false;
#undef DO_
}

void CommandBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usx.geofactions.CommandBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .usx.geofactions.CommandBuffer.CommandBufferType type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .usx.geofactions.SecurityCommandBuffer securityCommandBuffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_securitycommandbuffer(), output);
  }

  // optional .usx.geofactions.RawInputCommandBuffer rawInputCommandBuffer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_rawinputcommandbuffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usx.geofactions.CommandBuffer)
}

::google::protobuf::uint8* CommandBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usx.geofactions.CommandBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .usx.geofactions.CommandBuffer.CommandBufferType type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .usx.geofactions.SecurityCommandBuffer securityCommandBuffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_securitycommandbuffer(), deterministic, target);
  }

  // optional .usx.geofactions.RawInputCommandBuffer rawInputCommandBuffer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_rawinputcommandbuffer(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usx.geofactions.CommandBuffer)
  return target;
}

size_t CommandBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usx.geofactions.CommandBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .usx.geofactions.CommandBuffer.CommandBufferType type = 1 [default = UNKNOWN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .usx.geofactions.SecurityCommandBuffer securityCommandBuffer = 2;
    if (has_securitycommandbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *securitycommandbuffer_);
    }

    // optional .usx.geofactions.RawInputCommandBuffer rawInputCommandBuffer = 3;
    if (has_rawinputcommandbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rawinputcommandbuffer_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usx.geofactions.CommandBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usx.geofactions.CommandBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usx.geofactions.CommandBuffer)
    MergeFrom(*source);
  }
}

void CommandBuffer::MergeFrom(const CommandBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usx.geofactions.CommandBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_securitycommandbuffer()->::usx::geofactions::SecurityCommandBuffer::MergeFrom(from.securitycommandbuffer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rawinputcommandbuffer()->::usx::geofactions::RawInputCommandBuffer::MergeFrom(from.rawinputcommandbuffer());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usx.geofactions.CommandBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandBuffer::CopyFrom(const CommandBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usx.geofactions.CommandBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_securitycommandbuffer()) {
    if (!this->securitycommandbuffer_->IsInitialized()) return false;
  }
  if (has_rawinputcommandbuffer()) {
    if (!this->rawinputcommandbuffer_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuffer::Swap(CommandBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandBuffer::InternalSwap(CommandBuffer* other) {
  using std::swap;
  swap(securitycommandbuffer_, other->securitycommandbuffer_);
  swap(rawinputcommandbuffer_, other->rawinputcommandbuffer_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommandBuffer::GetMetadata() const {
  protobuf_CommandBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_CommandBuffer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geofactions
}  // namespace usx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::usx::geofactions::CommandBuffer* Arena::CreateMaybeMessage< ::usx::geofactions::CommandBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::usx::geofactions::CommandBuffer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
