// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityGameEvent.proto

#ifndef PROTOBUF_EntityGameEvent_2eproto__INCLUDED
#define PROTOBUF_EntityGameEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gameevent {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EntityGameEvent_2eproto();
void protobuf_AssignDesc_EntityGameEvent_2eproto();
void protobuf_ShutdownFile_EntityGameEvent_2eproto();

class EntityGameEvent;

enum EntityGameEvent_EntityGameEventType {
  EntityGameEvent_EntityGameEventType_CREATE = 0,
  EntityGameEvent_EntityGameEventType_DESTROY = 1
};
bool EntityGameEvent_EntityGameEventType_IsValid(int value);
const EntityGameEvent_EntityGameEventType EntityGameEvent_EntityGameEventType_EntityGameEventType_MIN = EntityGameEvent_EntityGameEventType_CREATE;
const EntityGameEvent_EntityGameEventType EntityGameEvent_EntityGameEventType_EntityGameEventType_MAX = EntityGameEvent_EntityGameEventType_DESTROY;
const int EntityGameEvent_EntityGameEventType_EntityGameEventType_ARRAYSIZE = EntityGameEvent_EntityGameEventType_EntityGameEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityGameEvent_EntityGameEventType_descriptor();
inline const ::std::string& EntityGameEvent_EntityGameEventType_Name(EntityGameEvent_EntityGameEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityGameEvent_EntityGameEventType_descriptor(), value);
}
inline bool EntityGameEvent_EntityGameEventType_Parse(
    const ::std::string& name, EntityGameEvent_EntityGameEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityGameEvent_EntityGameEventType>(
    EntityGameEvent_EntityGameEventType_descriptor(), name, value);
}
// ===================================================================

class EntityGameEvent : public ::google::protobuf::Message {
 public:
  EntityGameEvent();
  virtual ~EntityGameEvent();

  EntityGameEvent(const EntityGameEvent& from);

  inline EntityGameEvent& operator=(const EntityGameEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityGameEvent& default_instance();

  void Swap(EntityGameEvent* other);

  // implements Message ----------------------------------------------

  EntityGameEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityGameEvent& from);
  void MergeFrom(const EntityGameEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EntityGameEvent_EntityGameEventType EntityGameEventType;
  static const EntityGameEventType CREATE = EntityGameEvent_EntityGameEventType_CREATE;
  static const EntityGameEventType DESTROY = EntityGameEvent_EntityGameEventType_DESTROY;
  static inline bool EntityGameEventType_IsValid(int value) {
    return EntityGameEvent_EntityGameEventType_IsValid(value);
  }
  static const EntityGameEventType EntityGameEventType_MIN =
    EntityGameEvent_EntityGameEventType_EntityGameEventType_MIN;
  static const EntityGameEventType EntityGameEventType_MAX =
    EntityGameEvent_EntityGameEventType_EntityGameEventType_MAX;
  static const int EntityGameEventType_ARRAYSIZE =
    EntityGameEvent_EntityGameEventType_EntityGameEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EntityGameEventType_descriptor() {
    return EntityGameEvent_EntityGameEventType_descriptor();
  }
  static inline const ::std::string& EntityGameEventType_Name(EntityGameEventType value) {
    return EntityGameEvent_EntityGameEventType_Name(value);
  }
  static inline bool EntityGameEventType_Parse(const ::std::string& name,
      EntityGameEventType* value) {
    return EntityGameEvent_EntityGameEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gameevent.EntityGameEvent.EntityGameEventType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::gameevent::EntityGameEvent_EntityGameEventType type() const;
  inline void set_type(::gameevent::EntityGameEvent_EntityGameEventType value);

  // optional string UUID = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required uint64 entityTag = 3;
  inline bool has_entitytag() const;
  inline void clear_entitytag();
  static const int kEntityTagFieldNumber = 3;
  inline ::google::protobuf::uint64 entitytag() const;
  inline void set_entitytag(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gameevent.EntityGameEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_entitytag();
  inline void clear_has_entitytag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  ::google::protobuf::uint64 entitytag_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EntityGameEvent_2eproto();
  friend void protobuf_AssignDesc_EntityGameEvent_2eproto();
  friend void protobuf_ShutdownFile_EntityGameEvent_2eproto();

  void InitAsDefaultInstance();
  static EntityGameEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// EntityGameEvent

// required .gameevent.EntityGameEvent.EntityGameEventType type = 1;
inline bool EntityGameEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityGameEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityGameEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityGameEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::gameevent::EntityGameEvent_EntityGameEventType EntityGameEvent::type() const {
  return static_cast< ::gameevent::EntityGameEvent_EntityGameEventType >(type_);
}
inline void EntityGameEvent::set_type(::gameevent::EntityGameEvent_EntityGameEventType value) {
  assert(::gameevent::EntityGameEvent_EntityGameEventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string UUID = 2;
inline bool EntityGameEvent::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityGameEvent::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntityGameEvent::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntityGameEvent::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& EntityGameEvent::uuid() const {
  return *uuid_;
}
inline void EntityGameEvent::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void EntityGameEvent::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void EntityGameEvent::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntityGameEvent::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* EntityGameEvent::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntityGameEvent::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 entityTag = 3;
inline bool EntityGameEvent::has_entitytag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityGameEvent::set_has_entitytag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntityGameEvent::clear_has_entitytag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntityGameEvent::clear_entitytag() {
  entitytag_ = GOOGLE_ULONGLONG(0);
  clear_has_entitytag();
}
inline ::google::protobuf::uint64 EntityGameEvent::entitytag() const {
  return entitytag_;
}
inline void EntityGameEvent::set_entitytag(::google::protobuf::uint64 value) {
  set_has_entitytag();
  entitytag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameevent

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gameevent::EntityGameEvent_EntityGameEventType>() {
  return ::gameevent::EntityGameEvent_EntityGameEventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EntityGameEvent_2eproto__INCLUDED
