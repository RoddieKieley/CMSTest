// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameEvent.proto

#ifndef PROTOBUF_GameEvent_2eproto__INCLUDED
#define PROTOBUF_GameEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "EntityGameEvent.pb.h"
// @@protoc_insertion_point(includes)

namespace gameevent {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameEvent_2eproto();
void protobuf_AssignDesc_GameEvent_2eproto();
void protobuf_ShutdownFile_GameEvent_2eproto();

class GameEvent;

enum GameEvent_GameEventType {
  GameEvent_GameEventType_ENTITY = 0
};
bool GameEvent_GameEventType_IsValid(int value);
const GameEvent_GameEventType GameEvent_GameEventType_GameEventType_MIN = GameEvent_GameEventType_ENTITY;
const GameEvent_GameEventType GameEvent_GameEventType_GameEventType_MAX = GameEvent_GameEventType_ENTITY;
const int GameEvent_GameEventType_GameEventType_ARRAYSIZE = GameEvent_GameEventType_GameEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameEvent_GameEventType_descriptor();
inline const ::std::string& GameEvent_GameEventType_Name(GameEvent_GameEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameEvent_GameEventType_descriptor(), value);
}
inline bool GameEvent_GameEventType_Parse(
    const ::std::string& name, GameEvent_GameEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEvent_GameEventType>(
    GameEvent_GameEventType_descriptor(), name, value);
}
// ===================================================================

class GameEvent : public ::google::protobuf::Message {
 public:
  GameEvent();
  virtual ~GameEvent();

  GameEvent(const GameEvent& from);

  inline GameEvent& operator=(const GameEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent& default_instance();

  void Swap(GameEvent* other);

  // implements Message ----------------------------------------------

  GameEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameEvent& from);
  void MergeFrom(const GameEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GameEvent_GameEventType GameEventType;
  static const GameEventType ENTITY = GameEvent_GameEventType_ENTITY;
  static inline bool GameEventType_IsValid(int value) {
    return GameEvent_GameEventType_IsValid(value);
  }
  static const GameEventType GameEventType_MIN =
    GameEvent_GameEventType_GameEventType_MIN;
  static const GameEventType GameEventType_MAX =
    GameEvent_GameEventType_GameEventType_MAX;
  static const int GameEventType_ARRAYSIZE =
    GameEvent_GameEventType_GameEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GameEventType_descriptor() {
    return GameEvent_GameEventType_descriptor();
  }
  static inline const ::std::string& GameEventType_Name(GameEventType value) {
    return GameEvent_GameEventType_Name(value);
  }
  static inline bool GameEventType_Parse(const ::std::string& name,
      GameEventType* value) {
    return GameEvent_GameEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gameevent.GameEvent.GameEventType type = 1 [default = ENTITY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::gameevent::GameEvent_GameEventType type() const;
  inline void set_type(::gameevent::GameEvent_GameEventType value);

  // optional .gameevent.EntityGameEvent entityGameEvent = 3;
  inline bool has_entitygameevent() const;
  inline void clear_entitygameevent();
  static const int kEntityGameEventFieldNumber = 3;
  inline const ::gameevent::EntityGameEvent& entitygameevent() const;
  inline ::gameevent::EntityGameEvent* mutable_entitygameevent();
  inline ::gameevent::EntityGameEvent* release_entitygameevent();
  inline void set_allocated_entitygameevent(::gameevent::EntityGameEvent* entitygameevent);

  // @@protoc_insertion_point(class_scope:gameevent.GameEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_entitygameevent();
  inline void clear_has_entitygameevent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gameevent::EntityGameEvent* entitygameevent_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameEvent_2eproto();
  friend void protobuf_AssignDesc_GameEvent_2eproto();
  friend void protobuf_ShutdownFile_GameEvent_2eproto();

  void InitAsDefaultInstance();
  static GameEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// GameEvent

// required .gameevent.GameEvent.GameEventType type = 1 [default = ENTITY];
inline bool GameEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::gameevent::GameEvent_GameEventType GameEvent::type() const {
  return static_cast< ::gameevent::GameEvent_GameEventType >(type_);
}
inline void GameEvent::set_type(::gameevent::GameEvent_GameEventType value) {
  assert(::gameevent::GameEvent_GameEventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .gameevent.EntityGameEvent entityGameEvent = 3;
inline bool GameEvent::has_entitygameevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent::set_has_entitygameevent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent::clear_has_entitygameevent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent::clear_entitygameevent() {
  if (entitygameevent_ != NULL) entitygameevent_->::gameevent::EntityGameEvent::Clear();
  clear_has_entitygameevent();
}
inline const ::gameevent::EntityGameEvent& GameEvent::entitygameevent() const {
  return entitygameevent_ != NULL ? *entitygameevent_ : *default_instance_->entitygameevent_;
}
inline ::gameevent::EntityGameEvent* GameEvent::mutable_entitygameevent() {
  set_has_entitygameevent();
  if (entitygameevent_ == NULL) entitygameevent_ = new ::gameevent::EntityGameEvent;
  return entitygameevent_;
}
inline ::gameevent::EntityGameEvent* GameEvent::release_entitygameevent() {
  clear_has_entitygameevent();
  ::gameevent::EntityGameEvent* temp = entitygameevent_;
  entitygameevent_ = NULL;
  return temp;
}
inline void GameEvent::set_allocated_entitygameevent(::gameevent::EntityGameEvent* entitygameevent) {
  delete entitygameevent_;
  entitygameevent_ = entitygameevent;
  if (entitygameevent) {
    set_has_entitygameevent();
  } else {
    clear_has_entitygameevent();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameevent

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gameevent::GameEvent_GameEventType>() {
  return ::gameevent::GameEvent_GameEventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameEvent_2eproto__INCLUDED
