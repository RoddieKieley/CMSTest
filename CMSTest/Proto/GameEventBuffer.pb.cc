// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameEventBuffer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameEventBuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace usx {
namespace geofactions {

namespace {

const ::google::protobuf::Descriptor* GameEventBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEventBuffer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEventBuffer_GameEventBufferType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameEventBuffer_2eproto() {
  protobuf_AddDesc_GameEventBuffer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameEventBuffer.proto");
  GOOGLE_CHECK(file != NULL);
  GameEventBuffer_descriptor_ = file->message_type(0);
  static const int GameEventBuffer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEventBuffer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEventBuffer, entitygameeventbuffer_),
  };
  GameEventBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEventBuffer_descriptor_,
      GameEventBuffer::default_instance_,
      GameEventBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEventBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEventBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEventBuffer));
  GameEventBuffer_GameEventBufferType_descriptor_ = GameEventBuffer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameEventBuffer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEventBuffer_descriptor_, &GameEventBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameEventBuffer_2eproto() {
  delete GameEventBuffer::default_instance_;
  delete GameEventBuffer_reflection_;
}

void protobuf_AddDesc_GameEventBuffer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::usx::geofactions::protobuf_AddDesc_EntityGameEventBuffer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GameEventBuffer.proto\022\017usx.geofactions"
    "\032\033EntityGameEventBuffer.proto\"\307\001\n\017GameEv"
    "entBuffer\022J\n\004type\030\001 \002(\01624.usx.geofaction"
    "s.GameEventBuffer.GameEventBufferType:\006E"
    "NTITY\022E\n\025entityGameEventBuffer\030\003 \001(\0132&.u"
    "sx.geofactions.EntityGameEventBuffer\"!\n\023"
    "GameEventBufferType\022\n\n\006ENTITY\020\000", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameEventBuffer.proto", &protobuf_RegisterTypes);
  GameEventBuffer::default_instance_ = new GameEventBuffer();
  GameEventBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameEventBuffer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameEventBuffer_2eproto {
  StaticDescriptorInitializer_GameEventBuffer_2eproto() {
    protobuf_AddDesc_GameEventBuffer_2eproto();
  }
} static_descriptor_initializer_GameEventBuffer_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GameEventBuffer_GameEventBufferType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEventBuffer_GameEventBufferType_descriptor_;
}
bool GameEventBuffer_GameEventBufferType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEventBuffer_GameEventBufferType GameEventBuffer::ENTITY;
const GameEventBuffer_GameEventBufferType GameEventBuffer::GameEventBufferType_MIN;
const GameEventBuffer_GameEventBufferType GameEventBuffer::GameEventBufferType_MAX;
const int GameEventBuffer::GameEventBufferType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameEventBuffer::kTypeFieldNumber;
const int GameEventBuffer::kEntityGameEventBufferFieldNumber;
#endif  // !_MSC_VER

GameEventBuffer::GameEventBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEventBuffer::InitAsDefaultInstance() {
  entitygameeventbuffer_ = const_cast< ::usx::geofactions::EntityGameEventBuffer*>(&::usx::geofactions::EntityGameEventBuffer::default_instance());
}

GameEventBuffer::GameEventBuffer(const GameEventBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEventBuffer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  entitygameeventbuffer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEventBuffer::~GameEventBuffer() {
  SharedDtor();
}

void GameEventBuffer::SharedDtor() {
  if (this != default_instance_) {
    delete entitygameeventbuffer_;
  }
}

void GameEventBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEventBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEventBuffer_descriptor_;
}

const GameEventBuffer& GameEventBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameEventBuffer_2eproto();
  return *default_instance_;
}

GameEventBuffer* GameEventBuffer::default_instance_ = NULL;

GameEventBuffer* GameEventBuffer::New() const {
  return new GameEventBuffer;
}

void GameEventBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_entitygameeventbuffer()) {
      if (entitygameeventbuffer_ != NULL) entitygameeventbuffer_->::usx::geofactions::EntityGameEventBuffer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEventBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .usx.geofactions.GameEventBuffer.GameEventBufferType type = 1 [default = ENTITY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usx::geofactions::GameEventBuffer_GameEventBufferType_IsValid(value)) {
            set_type(static_cast< ::usx::geofactions::GameEventBuffer_GameEventBufferType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entityGameEventBuffer;
        break;
      }

      // optional .usx.geofactions.EntityGameEventBuffer entityGameEventBuffer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entityGameEventBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entitygameeventbuffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEventBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .usx.geofactions.GameEventBuffer.GameEventBufferType type = 1 [default = ENTITY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .usx.geofactions.EntityGameEventBuffer entityGameEventBuffer = 3;
  if (has_entitygameeventbuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entitygameeventbuffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEventBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .usx.geofactions.GameEventBuffer.GameEventBufferType type = 1 [default = ENTITY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .usx.geofactions.EntityGameEventBuffer entityGameEventBuffer = 3;
  if (has_entitygameeventbuffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entitygameeventbuffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEventBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .usx.geofactions.GameEventBuffer.GameEventBufferType type = 1 [default = ENTITY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .usx.geofactions.EntityGameEventBuffer entityGameEventBuffer = 3;
    if (has_entitygameeventbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entitygameeventbuffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEventBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEventBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEventBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEventBuffer::MergeFrom(const GameEventBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_entitygameeventbuffer()) {
      mutable_entitygameeventbuffer()->::usx::geofactions::EntityGameEventBuffer::MergeFrom(from.entitygameeventbuffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEventBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEventBuffer::CopyFrom(const GameEventBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEventBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_entitygameeventbuffer()) {
    if (!this->entitygameeventbuffer().IsInitialized()) return false;
  }
  return true;
}

void GameEventBuffer::Swap(GameEventBuffer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(entitygameeventbuffer_, other->entitygameeventbuffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEventBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEventBuffer_descriptor_;
  metadata.reflection = GameEventBuffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace geofactions
}  // namespace usx

// @@protoc_insertion_point(global_scope)
