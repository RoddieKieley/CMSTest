// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RawInputCommand.proto

#ifndef PROTOBUF_RawInputCommand_2eproto__INCLUDED
#define PROTOBUF_RawInputCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DualStickRawInputCommand.pb.h"
// @@protoc_insertion_point(includes)

namespace command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RawInputCommand_2eproto();
void protobuf_AssignDesc_RawInputCommand_2eproto();
void protobuf_ShutdownFile_RawInputCommand_2eproto();

class RawInputCommand;

enum RawInputCommand_RawInputCommandType {
  RawInputCommand_RawInputCommandType_DUALSTICK = 0
};
bool RawInputCommand_RawInputCommandType_IsValid(int value);
const RawInputCommand_RawInputCommandType RawInputCommand_RawInputCommandType_RawInputCommandType_MIN = RawInputCommand_RawInputCommandType_DUALSTICK;
const RawInputCommand_RawInputCommandType RawInputCommand_RawInputCommandType_RawInputCommandType_MAX = RawInputCommand_RawInputCommandType_DUALSTICK;
const int RawInputCommand_RawInputCommandType_RawInputCommandType_ARRAYSIZE = RawInputCommand_RawInputCommandType_RawInputCommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RawInputCommand_RawInputCommandType_descriptor();
inline const ::std::string& RawInputCommand_RawInputCommandType_Name(RawInputCommand_RawInputCommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RawInputCommand_RawInputCommandType_descriptor(), value);
}
inline bool RawInputCommand_RawInputCommandType_Parse(
    const ::std::string& name, RawInputCommand_RawInputCommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RawInputCommand_RawInputCommandType>(
    RawInputCommand_RawInputCommandType_descriptor(), name, value);
}
// ===================================================================

class RawInputCommand : public ::google::protobuf::Message {
 public:
  RawInputCommand();
  virtual ~RawInputCommand();

  RawInputCommand(const RawInputCommand& from);

  inline RawInputCommand& operator=(const RawInputCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawInputCommand& default_instance();

  void Swap(RawInputCommand* other);

  // implements Message ----------------------------------------------

  RawInputCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawInputCommand& from);
  void MergeFrom(const RawInputCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RawInputCommand_RawInputCommandType RawInputCommandType;
  static const RawInputCommandType DUALSTICK = RawInputCommand_RawInputCommandType_DUALSTICK;
  static inline bool RawInputCommandType_IsValid(int value) {
    return RawInputCommand_RawInputCommandType_IsValid(value);
  }
  static const RawInputCommandType RawInputCommandType_MIN =
    RawInputCommand_RawInputCommandType_RawInputCommandType_MIN;
  static const RawInputCommandType RawInputCommandType_MAX =
    RawInputCommand_RawInputCommandType_RawInputCommandType_MAX;
  static const int RawInputCommandType_ARRAYSIZE =
    RawInputCommand_RawInputCommandType_RawInputCommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RawInputCommandType_descriptor() {
    return RawInputCommand_RawInputCommandType_descriptor();
  }
  static inline const ::std::string& RawInputCommandType_Name(RawInputCommandType value) {
    return RawInputCommand_RawInputCommandType_Name(value);
  }
  static inline bool RawInputCommandType_Parse(const ::std::string& name,
      RawInputCommandType* value) {
    return RawInputCommand_RawInputCommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.RawInputCommand.RawInputCommandType type = 1 [default = DUALSTICK];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::RawInputCommand_RawInputCommandType type() const;
  inline void set_type(::command::RawInputCommand_RawInputCommandType value);

  // required string UUID = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .command.DualStickRawInputCommand dualStickRawInputCommand = 3;
  inline bool has_dualstickrawinputcommand() const;
  inline void clear_dualstickrawinputcommand();
  static const int kDualStickRawInputCommandFieldNumber = 3;
  inline const ::command::DualStickRawInputCommand& dualstickrawinputcommand() const;
  inline ::command::DualStickRawInputCommand* mutable_dualstickrawinputcommand();
  inline ::command::DualStickRawInputCommand* release_dualstickrawinputcommand();
  inline void set_allocated_dualstickrawinputcommand(::command::DualStickRawInputCommand* dualstickrawinputcommand);

  // @@protoc_insertion_point(class_scope:command.RawInputCommand)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_dualstickrawinputcommand();
  inline void clear_has_dualstickrawinputcommand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  ::command::DualStickRawInputCommand* dualstickrawinputcommand_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RawInputCommand_2eproto();
  friend void protobuf_AssignDesc_RawInputCommand_2eproto();
  friend void protobuf_ShutdownFile_RawInputCommand_2eproto();

  void InitAsDefaultInstance();
  static RawInputCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// RawInputCommand

// required .command.RawInputCommand.RawInputCommandType type = 1 [default = DUALSTICK];
inline bool RawInputCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawInputCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawInputCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawInputCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::RawInputCommand_RawInputCommandType RawInputCommand::type() const {
  return static_cast< ::command::RawInputCommand_RawInputCommandType >(type_);
}
inline void RawInputCommand::set_type(::command::RawInputCommand_RawInputCommandType value) {
  assert(::command::RawInputCommand_RawInputCommandType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string UUID = 2;
inline bool RawInputCommand::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawInputCommand::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawInputCommand::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawInputCommand::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& RawInputCommand::uuid() const {
  return *uuid_;
}
inline void RawInputCommand::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void RawInputCommand::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void RawInputCommand::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawInputCommand::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* RawInputCommand::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawInputCommand::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .command.DualStickRawInputCommand dualStickRawInputCommand = 3;
inline bool RawInputCommand::has_dualstickrawinputcommand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawInputCommand::set_has_dualstickrawinputcommand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawInputCommand::clear_has_dualstickrawinputcommand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawInputCommand::clear_dualstickrawinputcommand() {
  if (dualstickrawinputcommand_ != NULL) dualstickrawinputcommand_->::command::DualStickRawInputCommand::Clear();
  clear_has_dualstickrawinputcommand();
}
inline const ::command::DualStickRawInputCommand& RawInputCommand::dualstickrawinputcommand() const {
  return dualstickrawinputcommand_ != NULL ? *dualstickrawinputcommand_ : *default_instance_->dualstickrawinputcommand_;
}
inline ::command::DualStickRawInputCommand* RawInputCommand::mutable_dualstickrawinputcommand() {
  set_has_dualstickrawinputcommand();
  if (dualstickrawinputcommand_ == NULL) dualstickrawinputcommand_ = new ::command::DualStickRawInputCommand;
  return dualstickrawinputcommand_;
}
inline ::command::DualStickRawInputCommand* RawInputCommand::release_dualstickrawinputcommand() {
  clear_has_dualstickrawinputcommand();
  ::command::DualStickRawInputCommand* temp = dualstickrawinputcommand_;
  dualstickrawinputcommand_ = NULL;
  return temp;
}
inline void RawInputCommand::set_allocated_dualstickrawinputcommand(::command::DualStickRawInputCommand* dualstickrawinputcommand) {
  delete dualstickrawinputcommand_;
  dualstickrawinputcommand_ = dualstickrawinputcommand;
  if (dualstickrawinputcommand) {
    set_has_dualstickrawinputcommand();
  } else {
    clear_has_dualstickrawinputcommand();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::RawInputCommand_RawInputCommandType>() {
  return ::command::RawInputCommand_RawInputCommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RawInputCommand_2eproto__INCLUDED
