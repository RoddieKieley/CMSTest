// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box2d.proto

#include "box2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace box2d {
class PbVec2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbVec2>
      _instance;
} _PbVec2_default_instance_;
class PbFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbFilter>
      _instance;
} _PbFilter_default_instance_;
class PbShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbShape>
      _instance;
} _PbShape_default_instance_;
class PbFixtureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbFixture>
      _instance;
} _PbFixture_default_instance_;
class PbJointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbJoint>
      _instance;
} _PbJoint_default_instance_;
class PbBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbBody>
      _instance;
} _PbBody_default_instance_;
class PbWorldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbWorld>
      _instance;
} _PbWorld_default_instance_;
}  // namespace box2d
namespace protobuf_box2d_2eproto {
void InitDefaultsPbVec2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::box2d::_PbVec2_default_instance_;
    new (ptr) ::box2d::PbVec2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbVec2::InitAsDefaultInstance();
}

void InitDefaultsPbVec2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbVec2Impl);
}

void InitDefaultsPbFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::box2d::_PbFilter_default_instance_;
    new (ptr) ::box2d::PbFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbFilter::InitAsDefaultInstance();
}

void InitDefaultsPbFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbFilterImpl);
}

void InitDefaultsPbShapeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_box2d_2eproto::InitDefaultsPbVec2();
  {
    void* ptr = &::box2d::_PbShape_default_instance_;
    new (ptr) ::box2d::PbShape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbShape::InitAsDefaultInstance();
}

void InitDefaultsPbShape() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbShapeImpl);
}

void InitDefaultsPbFixtureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_box2d_2eproto::InitDefaultsPbFilter();
  protobuf_box2d_2eproto::InitDefaultsPbShape();
  {
    void* ptr = &::box2d::_PbFixture_default_instance_;
    new (ptr) ::box2d::PbFixture();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbFixture::InitAsDefaultInstance();
}

void InitDefaultsPbFixture() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbFixtureImpl);
}

void InitDefaultsPbJointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_box2d_2eproto::InitDefaultsPbVec2();
  {
    void* ptr = &::box2d::_PbJoint_default_instance_;
    new (ptr) ::box2d::PbJoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbJoint::InitAsDefaultInstance();
}

void InitDefaultsPbJoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbJointImpl);
}

void InitDefaultsPbBodyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_box2d_2eproto::InitDefaultsPbVec2();
  protobuf_box2d_2eproto::InitDefaultsPbFixture();
  {
    void* ptr = &::box2d::_PbBody_default_instance_;
    new (ptr) ::box2d::PbBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbBody::InitAsDefaultInstance();
}

void InitDefaultsPbBody() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbBodyImpl);
}

void InitDefaultsPbWorldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_box2d_2eproto::InitDefaultsPbVec2();
  protobuf_box2d_2eproto::InitDefaultsPbBody();
  protobuf_box2d_2eproto::InitDefaultsPbJoint();
  {
    void* ptr = &::box2d::_PbWorld_default_instance_;
    new (ptr) ::box2d::PbWorld();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbWorld::InitAsDefaultInstance();
}

void InitDefaultsPbWorld() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPbWorldImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbVec2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbVec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbVec2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbVec2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFilter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFilter, category_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFilter, mask_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFilter, group_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, normals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbShape, centroid_),
  2,
  4,
  0,
  3,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, restitution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, friction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbFixture, shape_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, body_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, body_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, collideconnected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, local_anchor_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, local_anchor_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, ref_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, enable_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, lower_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, upper_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, enable_motor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, motor_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_motor_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, local_axis_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_motor_force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, damping_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, ground_anchor_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, ground_anchor_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, length_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, length_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_length_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_length_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, joint1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, joint2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, spring_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, spring_damping_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, max_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, bodies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, joints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbJoint, target_volume_),
  6,
  34,
  7,
  8,
  10,
  0,
  1,
  9,
  11,
  13,
  14,
  12,
  15,
  16,
  2,
  17,
  18,
  19,
  20,
  3,
  4,
  22,
  23,
  24,
  25,
  26,
  5,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  ~0u,
  ~0u,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, mass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, linear_damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, angular_damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, gravity_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, bullet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, allow_sleep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, awake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, fixed_rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbBody, fixtures_),
  4,
  5,
  1,
  6,
  2,
  7,
  3,
  8,
  9,
  10,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  11,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, gravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, allow_sleep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, auto_clear_forces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, warm_starting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, continuous_physics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, sub_stepping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, bodies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::box2d::PbWorld, joints_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::box2d::PbVec2)},
  { 9, 17, sizeof(::box2d::PbFilter)},
  { 20, 32, sizeof(::box2d::PbShape)},
  { 39, 51, sizeof(::box2d::PbFixture)},
  { 58, 100, sizeof(::box2d::PbJoint)},
  { 137, 162, sizeof(::box2d::PbBody)},
  { 182, 196, sizeof(::box2d::PbWorld)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbVec2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbFixture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::box2d::_PbWorld_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "box2d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013box2d.proto\022\005box2d\"\036\n\006PbVec2\022\t\n\001x\030\001 \002("
      "\002\022\t\n\001y\030\002 \002(\002\"I\n\010PbFilter\022\025\n\rcategory_bit"
      "s\030\001 \001(\005\022\021\n\tmask_bits\030\002 \001(\005\022\023\n\013group_inde"
      "x\030\003 \001(\005\"\307\001\n\007PbShape\022\013\n\003tag\030\001 \001(\003\022 \n\004type"
      "\030\002 \002(\0162\022.box2d.PbShapeType\022\035\n\006center\030\n \001"
      "(\0132\r.box2d.PbVec2\022\016\n\006radius\030\013 \001(\002\022\035\n\006poi"
      "nts\030\024 \003(\0132\r.box2d.PbVec2\022\036\n\007normals\030\025 \003("
      "\0132\r.box2d.PbVec2\022\037\n\010centroid\030\026 \001(\0132\r.box"
      "2d.PbVec2\"\240\001\n\tPbFixture\022\013\n\003tag\030\001 \001(\003\022\023\n\013"
      "restitution\030\002 \001(\002\022\020\n\010friction\030\003 \001(\002\022\017\n\007d"
      "ensity\030\004 \001(\002\022\016\n\006sensor\030\005 \001(\010\022\037\n\006filter\030\n"
      " \001(\0132\017.box2d.PbFilter\022\035\n\005shape\030\013 \001(\0132\016.b"
      "ox2d.PbShape\"\350\006\n\007PbJoint\022\013\n\003tag\030\001 \001(\003\022 \n"
      "\004type\030\002 \002(\0162\022.box2d.PbJointType\022\016\n\006body_"
      "a\030\003 \001(\005\022\016\n\006body_b\030\004 \001(\005\022\030\n\020collideConnec"
      "ted\030\005 \001(\010\022%\n\016local_anchor_a\030\006 \001(\0132\r.box2"
      "d.PbVec2\022%\n\016local_anchor_b\030\007 \001(\0132\r.box2d"
      ".PbVec2\022\021\n\tref_angle\030\n \001(\002\022\024\n\014enable_lim"
      "it\030\014 \001(\010\022\023\n\013lower_limit\030\r \001(\002\022\023\n\013upper_l"
      "imit\030\016 \001(\002\022\024\n\014enable_motor\030\017 \001(\010\022\023\n\013moto"
      "r_speed\030\020 \001(\002\022\030\n\020max_motor_torque\030\021 \001(\002\022"
      "#\n\014local_axis_a\030\024 \001(\0132\r.box2d.PbVec2\022\027\n\017"
      "max_motor_force\030\025 \001(\002\022\016\n\006length\030\036 \001(\002\022\021\n"
      "\tfrequency\030\037 \001(\002\022\025\n\rdamping_ratio\030  \001(\002\022"
      "&\n\017ground_anchor_a\030( \001(\0132\r.box2d.PbVec2\022"
      "&\n\017ground_anchor_b\030) \001(\0132\r.box2d.PbVec2\022"
      "\020\n\010length_a\030* \001(\002\022\020\n\010length_b\030+ \001(\002\022\r\n\005r"
      "atio\030, \001(\002\022\024\n\014max_length_a\030- \001(\002\022\024\n\014max_"
      "length_b\030. \001(\002\022\035\n\006target\0302 \001(\0132\r.box2d.P"
      "bVec2\022\021\n\tmax_force\0303 \001(\002\022\016\n\006joint1\030= \001(\005"
      "\022\016\n\006joint2\030> \001(\005\022\030\n\020spring_frequency\030F \001"
      "(\002\022\034\n\024spring_damping_ratio\030G \001(\002\022\022\n\nmax_"
      "torque\030Z \001(\002\022\022\n\nmax_length\030d \001(\002\022\016\n\006bodi"
      "es\030n \003(\005\022\016\n\006joints\030o \003(\005\022\025\n\rtarget_volum"
      "e\030p \001(\002\"\305\003\n\006PbBody\022\013\n\003tag\030\001 \001(\003\022\037\n\004type\030"
      "\002 \002(\0162\021.box2d.PbBodyType\022\037\n\010position\030\n \001"
      "(\0132\r.box2d.PbVec2\022\r\n\005angle\030\013 \001(\002\022&\n\017line"
      "ar_velocity\030\014 \001(\0132\r.box2d.PbVec2\022\030\n\020angu"
      "lar_velocity\030\r \001(\002\022\034\n\005force\030\016 \001(\0132\r.box2"
      "d.PbVec2\022\016\n\006torque\030\017 \001(\002\022\014\n\004mass\030\020 \001(\002\022\t"
      "\n\001I\030\021 \001(\002\022\026\n\016linear_damping\0302 \001(\002\022\027\n\017ang"
      "ular_damping\0303 \001(\002\022\025\n\rgravity_scale\0304 \001("
      "\002\022\016\n\006bullet\0305 \001(\010\022\023\n\013allow_sleep\0306 \001(\010\022\r"
      "\n\005awake\0307 \001(\010\022\016\n\006active\0308 \001(\010\022\026\n\016fixed_r"
      "otation\0309 \001(\010\022\014\n\004UUID\030< \001(\t\022\"\n\010fixtures\030"
      "d \003(\0132\020.box2d.PbFixture\"\356\001\n\007PbWorld\022\013\n\003t"
      "ag\030\001 \001(\003\022\036\n\007gravity\030\002 \001(\0132\r.box2d.PbVec2"
      "\022\023\n\013allow_sleep\030\003 \001(\010\022\031\n\021auto_clear_forc"
      "es\030\004 \001(\010\022\025\n\rwarm_starting\030\005 \001(\010\022\032\n\022conti"
      "nuous_physics\030\006 \001(\010\022\024\n\014sub_stepping\030\007 \001("
      "\010\022\035\n\006bodies\030\024 \003(\0132\r.box2d.PbBody\022\036\n\006join"
      "ts\030\025 \003(\0132\016.box2d.PbJoint*4\n\nPbBodyType\022\n"
      "\n\006STATIC\020\000\022\013\n\007DYNAMIC\020\001\022\r\n\tKINEMATIC\020\002*:"
      "\n\013PbShapeType\022\n\n\006CIRCLE\020\001\022\013\n\007POLYGON\020\002\022\010"
      "\n\004EDGE\020\003\022\010\n\004LOOP\020\004*\245\001\n\013PbJointType\022\014\n\010DI"
      "STANCE\020\001\022\014\n\010REVOLUTE\020\002\022\r\n\tPRISMATIC\020\003\022\n\n"
      "\006PULLEY\020\004\022\t\n\005MOUSE\020\005\022\010\n\004GEAR\020\006\022\t\n\005WHEEL\020"
      "\007\022\010\n\004WELD\020\010\022\014\n\010FRICTION\020\t\022\010\n\004ROPE\020\n\022\023\n\017C"
      "ONSTANT_VOLUME\020\013\022\010\n\004LINE\020\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "box2d.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_box2d_2eproto
namespace box2d {
const ::google::protobuf::EnumDescriptor* PbBodyType_descriptor() {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_box2d_2eproto::file_level_enum_descriptors[0];
}
bool PbBodyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PbShapeType_descriptor() {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_box2d_2eproto::file_level_enum_descriptors[1];
}
bool PbShapeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PbJointType_descriptor() {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_box2d_2eproto::file_level_enum_descriptors[2];
}
bool PbJointType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PbVec2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbVec2::kXFieldNumber;
const int PbVec2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbVec2::PbVec2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbVec2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbVec2)
}
PbVec2::PbVec2(const PbVec2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbVec2)
}

void PbVec2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PbVec2::~PbVec2() {
  // @@protoc_insertion_point(destructor:box2d.PbVec2)
  SharedDtor();
}

void PbVec2::SharedDtor() {
}

void PbVec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVec2::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbVec2& PbVec2::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbVec2();
  return *internal_default_instance();
}

PbVec2* PbVec2::New(::google::protobuf::Arena* arena) const {
  PbVec2* n = new PbVec2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbVec2::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbVec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbVec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbVec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbVec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbVec2)
  return false;
#undef DO_
}

void PbVec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbVec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbVec2)
}

::google::protobuf::uint8* PbVec2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbVec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbVec2)
  return target;
}

size_t PbVec2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:box2d.PbVec2)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PbVec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbVec2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVec2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbVec2)
  GOOGLE_DCHECK_NE(&from, this);
  const PbVec2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbVec2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbVec2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbVec2)
    MergeFrom(*source);
  }
}

void PbVec2::MergeFrom(const PbVec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbVec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbVec2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbVec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVec2::CopyFrom(const PbVec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbVec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PbVec2::Swap(PbVec2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbVec2::InternalSwap(PbVec2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbVec2::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbFilter::kCategoryBitsFieldNumber;
const int PbFilter::kMaskBitsFieldNumber;
const int PbFilter::kGroupIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbFilter::PbFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbFilter)
}
PbFilter::PbFilter(const PbFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_bits_, &from.category_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_index_) -
    reinterpret_cast<char*>(&category_bits_)) + sizeof(group_index_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbFilter)
}

void PbFilter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&category_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_index_) -
      reinterpret_cast<char*>(&category_bits_)) + sizeof(group_index_));
}

PbFilter::~PbFilter() {
  // @@protoc_insertion_point(destructor:box2d.PbFilter)
  SharedDtor();
}

void PbFilter::SharedDtor() {
}

void PbFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFilter::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbFilter& PbFilter::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbFilter();
  return *internal_default_instance();
}

PbFilter* PbFilter::New(::google::protobuf::Arena* arena) const {
  PbFilter* n = new PbFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&category_bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_index_) -
        reinterpret_cast<char*>(&category_bits_)) + sizeof(group_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_bits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_bits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mask_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_group_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbFilter)
  return false;
#undef DO_
}

void PbFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_bits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_bits(), output);
  }

  // optional int32 mask_bits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mask_bits(), output);
  }

  // optional int32 group_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbFilter)
}

::google::protobuf::uint8* PbFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_bits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_bits(), target);
  }

  // optional int32 mask_bits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mask_bits(), target);
  }

  // optional int32 group_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbFilter)
  return target;
}

size_t PbFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 category_bits = 1;
    if (has_category_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_bits());
    }

    // optional int32 mask_bits = 2;
    if (has_mask_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_bits());
    }

    // optional int32 group_index = 3;
    if (has_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PbFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbFilter)
    MergeFrom(*source);
  }
}

void PbFilter::MergeFrom(const PbFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      category_bits_ = from.category_bits_;
    }
    if (cached_has_bits & 0x00000002u) {
      mask_bits_ = from.mask_bits_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_index_ = from.group_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFilter::CopyFrom(const PbFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFilter::IsInitialized() const {
  return true;
}

void PbFilter::Swap(PbFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbFilter::InternalSwap(PbFilter* other) {
  using std::swap;
  swap(category_bits_, other->category_bits_);
  swap(mask_bits_, other->mask_bits_);
  swap(group_index_, other->group_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbFilter::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbShape::InitAsDefaultInstance() {
  ::box2d::_PbShape_default_instance_._instance.get_mutable()->center_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbShape_default_instance_._instance.get_mutable()->centroid_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbShape::kTagFieldNumber;
const int PbShape::kTypeFieldNumber;
const int PbShape::kCenterFieldNumber;
const int PbShape::kRadiusFieldNumber;
const int PbShape::kPointsFieldNumber;
const int PbShape::kNormalsFieldNumber;
const int PbShape::kCentroidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbShape::PbShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbShape();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbShape)
}
PbShape::PbShape(const PbShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      points_(from.points_),
      normals_(from.normals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::box2d::PbVec2(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_centroid()) {
    centroid_ = new ::box2d::PbVec2(*from.centroid_);
  } else {
    centroid_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbShape)
}

void PbShape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
  type_ = 1;
}

PbShape::~PbShape() {
  // @@protoc_insertion_point(destructor:box2d.PbShape)
  SharedDtor();
}

void PbShape::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete centroid_;
}

void PbShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbShape::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbShape& PbShape::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbShape();
  return *internal_default_instance();
}

PbShape* PbShape::New(::google::protobuf::Arena* arena) const {
  PbShape* n = new PbShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbShape::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  normals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(centroid_ != NULL);
      centroid_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(radius_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .box2d.PbShapeType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::box2d::PbShapeType_IsValid(value)) {
            set_type(static_cast< ::box2d::PbShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 center = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .box2d.PbVec2 points = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .box2d.PbVec2 normals = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_normals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 centroid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_centroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbShape)
  return false;
#undef DO_
}

void PbShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // required .box2d.PbShapeType type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .box2d.PbVec2 center = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->center_, output);
  }

  // optional float radius = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->radius(), output);
  }

  // repeated .box2d.PbVec2 points = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->points(static_cast<int>(i)), output);
  }

  // repeated .box2d.PbVec2 normals = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->normals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->normals(static_cast<int>(i)), output);
  }

  // optional .box2d.PbVec2 centroid = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->centroid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbShape)
}

::google::protobuf::uint8* PbShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // required .box2d.PbShapeType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .box2d.PbVec2 center = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->center_, deterministic, target);
  }

  // optional float radius = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->radius(), target);
  }

  // repeated .box2d.PbVec2 points = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .box2d.PbVec2 normals = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->normals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->normals(static_cast<int>(i)), deterministic, target);
  }

  // optional .box2d.PbVec2 centroid = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, *this->centroid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbShape)
  return target;
}

size_t PbShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .box2d.PbShapeType type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .box2d.PbVec2 points = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated .box2d.PbVec2 normals = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->normals_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->normals(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .box2d.PbVec2 center = 10;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->center_);
    }

    // optional .box2d.PbVec2 centroid = 22;
    if (has_centroid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->centroid_);
    }

    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // optional float radius = 11;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbShape)
  GOOGLE_DCHECK_NE(&from, this);
  const PbShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbShape)
    MergeFrom(*source);
  }
}

void PbShape::MergeFrom(const PbShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  normals_.MergeFrom(from.normals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_center()->::box2d::PbVec2::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_centroid()->::box2d::PbVec2::MergeFrom(from.centroid());
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000008u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbShape::CopyFrom(const PbShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->normals())) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  if (has_centroid()) {
    if (!this->centroid_->IsInitialized()) return false;
  }
  return true;
}

void PbShape::Swap(PbShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbShape::InternalSwap(PbShape* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  normals_.InternalSwap(&other->normals_);
  swap(center_, other->center_);
  swap(centroid_, other->centroid_);
  swap(tag_, other->tag_);
  swap(radius_, other->radius_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbShape::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbFixture::InitAsDefaultInstance() {
  ::box2d::_PbFixture_default_instance_._instance.get_mutable()->filter_ = const_cast< ::box2d::PbFilter*>(
      ::box2d::PbFilter::internal_default_instance());
  ::box2d::_PbFixture_default_instance_._instance.get_mutable()->shape_ = const_cast< ::box2d::PbShape*>(
      ::box2d::PbShape::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbFixture::kTagFieldNumber;
const int PbFixture::kRestitutionFieldNumber;
const int PbFixture::kFrictionFieldNumber;
const int PbFixture::kDensityFieldNumber;
const int PbFixture::kSensorFieldNumber;
const int PbFixture::kFilterFieldNumber;
const int PbFixture::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbFixture::PbFixture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbFixture();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbFixture)
}
PbFixture::PbFixture(const PbFixture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::box2d::PbFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::box2d::PbShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(sensor_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbFixture)
}

void PbFixture::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(sensor_));
}

PbFixture::~PbFixture() {
  // @@protoc_insertion_point(destructor:box2d.PbFixture)
  SharedDtor();
}

void PbFixture::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete shape_;
}

void PbFixture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFixture::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbFixture& PbFixture::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbFixture();
  return *internal_default_instance();
}

PbFixture* PbFixture::New(::google::protobuf::Arena* arena) const {
  PbFixture* n = new PbFixture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbFixture::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbFixture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filter_ != NULL);
      filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != NULL);
      shape_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensor_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(sensor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbFixture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbFixture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float restitution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_restitution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restitution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float friction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_friction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &friction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float density = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sensor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sensor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbFilter filter = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbShape shape = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbFixture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbFixture)
  return false;
#undef DO_
}

void PbFixture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbFixture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // optional float restitution = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->restitution(), output);
  }

  // optional float friction = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->friction(), output);
  }

  // optional float density = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->density(), output);
  }

  // optional bool sensor = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sensor(), output);
  }

  // optional .box2d.PbFilter filter = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->filter_, output);
  }

  // optional .box2d.PbShape shape = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->shape_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbFixture)
}

::google::protobuf::uint8* PbFixture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbFixture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // optional float restitution = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->restitution(), target);
  }

  // optional float friction = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->friction(), target);
  }

  // optional float density = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->density(), target);
  }

  // optional bool sensor = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sensor(), target);
  }

  // optional .box2d.PbFilter filter = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->filter_, deterministic, target);
  }

  // optional .box2d.PbShape shape = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->shape_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbFixture)
  return target;
}

size_t PbFixture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbFixture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .box2d.PbFilter filter = 10;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->filter_);
    }

    // optional .box2d.PbShape shape = 11;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->shape_);
    }

    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // optional float restitution = 2;
    if (has_restitution()) {
      total_size += 1 + 4;
    }

    // optional float friction = 3;
    if (has_friction()) {
      total_size += 1 + 4;
    }

    // optional float density = 4;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // optional bool sensor = 5;
    if (has_sensor()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFixture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbFixture)
  GOOGLE_DCHECK_NE(&from, this);
  const PbFixture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbFixture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbFixture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbFixture)
    MergeFrom(*source);
  }
}

void PbFixture::MergeFrom(const PbFixture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbFixture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filter()->::box2d::PbFilter::MergeFrom(from.filter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shape()->::box2d::PbShape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000008u) {
      restitution_ = from.restitution_;
    }
    if (cached_has_bits & 0x00000010u) {
      friction_ = from.friction_;
    }
    if (cached_has_bits & 0x00000020u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000040u) {
      sensor_ = from.sensor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbFixture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbFixture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFixture::CopyFrom(const PbFixture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbFixture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFixture::IsInitialized() const {
  if (has_shape()) {
    if (!this->shape_->IsInitialized()) return false;
  }
  return true;
}

void PbFixture::Swap(PbFixture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbFixture::InternalSwap(PbFixture* other) {
  using std::swap;
  swap(filter_, other->filter_);
  swap(shape_, other->shape_);
  swap(tag_, other->tag_);
  swap(restitution_, other->restitution_);
  swap(friction_, other->friction_);
  swap(density_, other->density_);
  swap(sensor_, other->sensor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbFixture::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbJoint::InitAsDefaultInstance() {
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->local_anchor_a_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->local_anchor_b_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->local_axis_a_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->ground_anchor_a_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->ground_anchor_b_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->target_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbJoint::kTagFieldNumber;
const int PbJoint::kTypeFieldNumber;
const int PbJoint::kBodyAFieldNumber;
const int PbJoint::kBodyBFieldNumber;
const int PbJoint::kCollideConnectedFieldNumber;
const int PbJoint::kLocalAnchorAFieldNumber;
const int PbJoint::kLocalAnchorBFieldNumber;
const int PbJoint::kRefAngleFieldNumber;
const int PbJoint::kEnableLimitFieldNumber;
const int PbJoint::kLowerLimitFieldNumber;
const int PbJoint::kUpperLimitFieldNumber;
const int PbJoint::kEnableMotorFieldNumber;
const int PbJoint::kMotorSpeedFieldNumber;
const int PbJoint::kMaxMotorTorqueFieldNumber;
const int PbJoint::kLocalAxisAFieldNumber;
const int PbJoint::kMaxMotorForceFieldNumber;
const int PbJoint::kLengthFieldNumber;
const int PbJoint::kFrequencyFieldNumber;
const int PbJoint::kDampingRatioFieldNumber;
const int PbJoint::kGroundAnchorAFieldNumber;
const int PbJoint::kGroundAnchorBFieldNumber;
const int PbJoint::kLengthAFieldNumber;
const int PbJoint::kLengthBFieldNumber;
const int PbJoint::kRatioFieldNumber;
const int PbJoint::kMaxLengthAFieldNumber;
const int PbJoint::kMaxLengthBFieldNumber;
const int PbJoint::kTargetFieldNumber;
const int PbJoint::kMaxForceFieldNumber;
const int PbJoint::kJoint1FieldNumber;
const int PbJoint::kJoint2FieldNumber;
const int PbJoint::kSpringFrequencyFieldNumber;
const int PbJoint::kSpringDampingRatioFieldNumber;
const int PbJoint::kMaxTorqueFieldNumber;
const int PbJoint::kMaxLengthFieldNumber;
const int PbJoint::kBodiesFieldNumber;
const int PbJoint::kJointsFieldNumber;
const int PbJoint::kTargetVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbJoint::PbJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbJoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbJoint)
}
PbJoint::PbJoint(const PbJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bodies_(from.bodies_),
      joints_(from.joints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_anchor_a()) {
    local_anchor_a_ = new ::box2d::PbVec2(*from.local_anchor_a_);
  } else {
    local_anchor_a_ = NULL;
  }
  if (from.has_local_anchor_b()) {
    local_anchor_b_ = new ::box2d::PbVec2(*from.local_anchor_b_);
  } else {
    local_anchor_b_ = NULL;
  }
  if (from.has_local_axis_a()) {
    local_axis_a_ = new ::box2d::PbVec2(*from.local_axis_a_);
  } else {
    local_axis_a_ = NULL;
  }
  if (from.has_ground_anchor_a()) {
    ground_anchor_a_ = new ::box2d::PbVec2(*from.ground_anchor_a_);
  } else {
    ground_anchor_a_ = NULL;
  }
  if (from.has_ground_anchor_b()) {
    ground_anchor_b_ = new ::box2d::PbVec2(*from.ground_anchor_b_);
  } else {
    ground_anchor_b_ = NULL;
  }
  if (from.has_target()) {
    target_ = new ::box2d::PbVec2(*from.target_);
  } else {
    target_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbJoint)
}

void PbJoint::SharedCtor() {
  ::memset(&local_anchor_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_length_) -
      reinterpret_cast<char*>(&local_anchor_a_)) + sizeof(max_length_));
  type_ = 1;
  _cached_size_ = 0;
}

PbJoint::~PbJoint() {
  // @@protoc_insertion_point(destructor:box2d.PbJoint)
  SharedDtor();
}

void PbJoint::SharedDtor() {
  if (this != internal_default_instance()) delete local_anchor_a_;
  if (this != internal_default_instance()) delete local_anchor_b_;
  if (this != internal_default_instance()) delete local_axis_a_;
  if (this != internal_default_instance()) delete ground_anchor_a_;
  if (this != internal_default_instance()) delete ground_anchor_b_;
  if (this != internal_default_instance()) delete target_;
}

void PbJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbJoint::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbJoint& PbJoint::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbJoint();
  return *internal_default_instance();
}

PbJoint* PbJoint::New(::google::protobuf::Arena* arena) const {
  PbJoint* n = new PbJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodies_.Clear();
  joints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(local_anchor_a_ != NULL);
      local_anchor_a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(local_anchor_b_ != NULL);
      local_anchor_b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(local_axis_a_ != NULL);
      local_axis_a_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ground_anchor_a_ != NULL);
      ground_anchor_a_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ground_anchor_b_ != NULL);
      ground_anchor_b_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(target_ != NULL);
      target_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&body_a_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(body_a_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&body_b_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&motor_speed_) -
        reinterpret_cast<char*>(&body_b_)) + sizeof(motor_speed_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&max_motor_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_b_) -
        reinterpret_cast<char*>(&max_motor_torque_)) + sizeof(length_b_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spring_damping_ratio_) -
        reinterpret_cast<char*>(&ratio_)) + sizeof(spring_damping_ratio_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 7u) {
    ::memset(&max_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_length_) -
        reinterpret_cast<char*>(&max_torque_)) + sizeof(max_length_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .box2d.PbJointType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::box2d::PbJointType_IsValid(value)) {
            set_type(static_cast< ::box2d::PbJointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 body_a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_body_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 body_b = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_body_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool collideConnected = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_collideconnected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 local_anchor_a = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_anchor_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 local_anchor_b = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_anchor_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ref_angle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_ref_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ref_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_limit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_enable_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lower_limit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_lower_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float upper_limit = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_upper_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_motor = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_enable_motor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float motor_speed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_motor_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_motor_torque = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_max_motor_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_motor_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 local_axis_a = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_axis_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_motor_force = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_max_motor_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_motor_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frequency = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
          set_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float damping_ratio = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {
          set_has_damping_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damping_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 ground_anchor_a = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_anchor_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 ground_anchor_b = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_anchor_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length_a = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 341 & 0xFF */)) {
          set_has_length_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length_b = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 349 & 0xFF */)) {
          set_has_length_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ratio = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 357 & 0xFF */)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_length_a = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 365 & 0xFF */)) {
          set_has_max_length_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_length_b = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 373 & 0xFF */)) {
          set_has_max_length_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 target = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_force = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {
          set_has_max_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 joint1 = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_joint1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joint1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 joint2 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_joint2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joint2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spring_frequency = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 565 & 0xFF */)) {
          set_has_spring_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spring_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spring_damping_ratio = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 573 & 0xFF */)) {
          set_has_spring_damping_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spring_damping_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_torque = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 725 & 0xFF */)) {
          set_has_max_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_length = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 805 & 0xFF */)) {
          set_has_max_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bodies = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 880u, input, this->mutable_bodies())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bodies())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 joints = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 888 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 888u, input, this->mutable_joints())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 890 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_joints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float target_volume = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 901 & 0xFF */)) {
          set_has_target_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbJoint)
  return false;
#undef DO_
}

void PbJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  cached_has_bits = _has_bits_[1];
  // required .box2d.PbJointType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 body_a = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->body_a(), output);
  }

  // optional int32 body_b = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->body_b(), output);
  }

  // optional bool collideConnected = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->collideconnected(), output);
  }

  // optional .box2d.PbVec2 local_anchor_a = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->local_anchor_a_, output);
  }

  // optional .box2d.PbVec2 local_anchor_b = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->local_anchor_b_, output);
  }

  // optional float ref_angle = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ref_angle(), output);
  }

  // optional bool enable_limit = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_limit(), output);
  }

  // optional float lower_limit = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->lower_limit(), output);
  }

  // optional float upper_limit = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->upper_limit(), output);
  }

  // optional bool enable_motor = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_motor(), output);
  }

  // optional float motor_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->motor_speed(), output);
  }

  // optional float max_motor_torque = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->max_motor_torque(), output);
  }

  // optional .box2d.PbVec2 local_axis_a = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->local_axis_a_, output);
  }

  // optional float max_motor_force = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->max_motor_force(), output);
  }

  // optional float length = 30;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->length(), output);
  }

  // optional float frequency = 31;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->frequency(), output);
  }

  // optional float damping_ratio = 32;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->damping_ratio(), output);
  }

  // optional .box2d.PbVec2 ground_anchor_a = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->ground_anchor_a_, output);
  }

  // optional .box2d.PbVec2 ground_anchor_b = 41;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->ground_anchor_b_, output);
  }

  // optional float length_a = 42;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->length_a(), output);
  }

  // optional float length_b = 43;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->length_b(), output);
  }

  // optional float ratio = 44;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->ratio(), output);
  }

  // optional float max_length_a = 45;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->max_length_a(), output);
  }

  // optional float max_length_b = 46;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->max_length_b(), output);
  }

  // optional .box2d.PbVec2 target = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->target_, output);
  }

  // optional float max_force = 51;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->max_force(), output);
  }

  // optional int32 joint1 = 61;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->joint1(), output);
  }

  // optional int32 joint2 = 62;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->joint2(), output);
  }

  // optional float spring_frequency = 70;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->spring_frequency(), output);
  }

  // optional float spring_damping_ratio = 71;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->spring_damping_ratio(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float max_torque = 90;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->max_torque(), output);
  }

  // optional float max_length = 100;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->max_length(), output);
  }

  // repeated int32 bodies = 110;
  for (int i = 0, n = this->bodies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      110, this->bodies(i), output);
  }

  // repeated int32 joints = 111;
  for (int i = 0, n = this->joints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      111, this->joints(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float target_volume = 112;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(112, this->target_volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbJoint)
}

::google::protobuf::uint8* PbJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required .box2d.PbJointType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 body_a = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->body_a(), target);
  }

  // optional int32 body_b = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->body_b(), target);
  }

  // optional bool collideConnected = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->collideconnected(), target);
  }

  // optional .box2d.PbVec2 local_anchor_a = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->local_anchor_a_, deterministic, target);
  }

  // optional .box2d.PbVec2 local_anchor_b = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->local_anchor_b_, deterministic, target);
  }

  // optional float ref_angle = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ref_angle(), target);
  }

  // optional bool enable_limit = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enable_limit(), target);
  }

  // optional float lower_limit = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->lower_limit(), target);
  }

  // optional float upper_limit = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->upper_limit(), target);
  }

  // optional bool enable_motor = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_motor(), target);
  }

  // optional float motor_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->motor_speed(), target);
  }

  // optional float max_motor_torque = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->max_motor_torque(), target);
  }

  // optional .box2d.PbVec2 local_axis_a = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->local_axis_a_, deterministic, target);
  }

  // optional float max_motor_force = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->max_motor_force(), target);
  }

  // optional float length = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->length(), target);
  }

  // optional float frequency = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->frequency(), target);
  }

  // optional float damping_ratio = 32;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->damping_ratio(), target);
  }

  // optional .box2d.PbVec2 ground_anchor_a = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, *this->ground_anchor_a_, deterministic, target);
  }

  // optional .box2d.PbVec2 ground_anchor_b = 41;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, *this->ground_anchor_b_, deterministic, target);
  }

  // optional float length_a = 42;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->length_a(), target);
  }

  // optional float length_b = 43;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->length_b(), target);
  }

  // optional float ratio = 44;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->ratio(), target);
  }

  // optional float max_length_a = 45;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->max_length_a(), target);
  }

  // optional float max_length_b = 46;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->max_length_b(), target);
  }

  // optional .box2d.PbVec2 target = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, *this->target_, deterministic, target);
  }

  // optional float max_force = 51;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->max_force(), target);
  }

  // optional int32 joint1 = 61;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->joint1(), target);
  }

  // optional int32 joint2 = 62;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->joint2(), target);
  }

  // optional float spring_frequency = 70;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->spring_frequency(), target);
  }

  // optional float spring_damping_ratio = 71;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->spring_damping_ratio(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float max_torque = 90;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(90, this->max_torque(), target);
  }

  // optional float max_length = 100;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->max_length(), target);
  }

  // repeated int32 bodies = 110;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(110, this->bodies_, target);

  // repeated int32 joints = 111;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(111, this->joints_, target);

  cached_has_bits = _has_bits_[0];
  // optional float target_volume = 112;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(112, this->target_volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbJoint)
  return target;
}

size_t PbJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbJoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .box2d.PbJointType type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated int32 bodies = 110;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bodies_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bodies_size());
    total_size += data_size;
  }

  // repeated int32 joints = 111;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->joints_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->joints_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .box2d.PbVec2 local_anchor_a = 6;
    if (has_local_anchor_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->local_anchor_a_);
    }

    // optional .box2d.PbVec2 local_anchor_b = 7;
    if (has_local_anchor_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->local_anchor_b_);
    }

    // optional .box2d.PbVec2 local_axis_a = 20;
    if (has_local_axis_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->local_axis_a_);
    }

    // optional .box2d.PbVec2 ground_anchor_a = 40;
    if (has_ground_anchor_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ground_anchor_a_);
    }

    // optional .box2d.PbVec2 ground_anchor_b = 41;
    if (has_ground_anchor_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ground_anchor_b_);
    }

    // optional .box2d.PbVec2 target = 50;
    if (has_target()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->target_);
    }

    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // optional int32 body_a = 3;
    if (has_body_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_a());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 body_b = 4;
    if (has_body_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_b());
    }

    // optional float ref_angle = 10;
    if (has_ref_angle()) {
      total_size += 1 + 4;
    }

    // optional bool collideConnected = 5;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional bool enable_limit = 12;
    if (has_enable_limit()) {
      total_size += 1 + 1;
    }

    // optional bool enable_motor = 15;
    if (has_enable_motor()) {
      total_size += 1 + 1;
    }

    // optional float lower_limit = 13;
    if (has_lower_limit()) {
      total_size += 1 + 4;
    }

    // optional float upper_limit = 14;
    if (has_upper_limit()) {
      total_size += 1 + 4;
    }

    // optional float motor_speed = 16;
    if (has_motor_speed()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float max_motor_torque = 17;
    if (has_max_motor_torque()) {
      total_size += 2 + 4;
    }

    // optional float max_motor_force = 21;
    if (has_max_motor_force()) {
      total_size += 2 + 4;
    }

    // optional float length = 30;
    if (has_length()) {
      total_size += 2 + 4;
    }

    // optional float frequency = 31;
    if (has_frequency()) {
      total_size += 2 + 4;
    }

    // optional float damping_ratio = 32;
    if (has_damping_ratio()) {
      total_size += 2 + 4;
    }

    // optional float target_volume = 112;
    if (has_target_volume()) {
      total_size += 2 + 4;
    }

    // optional float length_a = 42;
    if (has_length_a()) {
      total_size += 2 + 4;
    }

    // optional float length_b = 43;
    if (has_length_b()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float ratio = 44;
    if (has_ratio()) {
      total_size += 2 + 4;
    }

    // optional float max_length_a = 45;
    if (has_max_length_a()) {
      total_size += 2 + 4;
    }

    // optional float max_length_b = 46;
    if (has_max_length_b()) {
      total_size += 2 + 4;
    }

    // optional float max_force = 51;
    if (has_max_force()) {
      total_size += 2 + 4;
    }

    // optional int32 joint1 = 61;
    if (has_joint1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joint1());
    }

    // optional int32 joint2 = 62;
    if (has_joint2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joint2());
    }

    // optional float spring_frequency = 70;
    if (has_spring_frequency()) {
      total_size += 2 + 4;
    }

    // optional float spring_damping_ratio = 71;
    if (has_spring_damping_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 3u) {
    // optional float max_torque = 90;
    if (has_max_torque()) {
      total_size += 2 + 4;
    }

    // optional float max_length = 100;
    if (has_max_length()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PbJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbJoint)
    MergeFrom(*source);
  }
}

void PbJoint::MergeFrom(const PbJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodies_.MergeFrom(from.bodies_);
  joints_.MergeFrom(from.joints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_local_anchor_a()->::box2d::PbVec2::MergeFrom(from.local_anchor_a());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_local_anchor_b()->::box2d::PbVec2::MergeFrom(from.local_anchor_b());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_local_axis_a()->::box2d::PbVec2::MergeFrom(from.local_axis_a());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ground_anchor_a()->::box2d::PbVec2::MergeFrom(from.ground_anchor_a());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_ground_anchor_b()->::box2d::PbVec2::MergeFrom(from.ground_anchor_b());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_target()->::box2d::PbVec2::MergeFrom(from.target());
    }
    if (cached_has_bits & 0x00000040u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000080u) {
      body_a_ = from.body_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      body_b_ = from.body_b_;
    }
    if (cached_has_bits & 0x00000200u) {
      ref_angle_ = from.ref_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      collideconnected_ = from.collideconnected_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_limit_ = from.enable_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_motor_ = from.enable_motor_;
    }
    if (cached_has_bits & 0x00002000u) {
      lower_limit_ = from.lower_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      upper_limit_ = from.upper_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      motor_speed_ = from.motor_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      max_motor_torque_ = from.max_motor_torque_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_motor_force_ = from.max_motor_force_;
    }
    if (cached_has_bits & 0x00040000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00080000u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00100000u) {
      damping_ratio_ = from.damping_ratio_;
    }
    if (cached_has_bits & 0x00200000u) {
      target_volume_ = from.target_volume_;
    }
    if (cached_has_bits & 0x00400000u) {
      length_a_ = from.length_a_;
    }
    if (cached_has_bits & 0x00800000u) {
      length_b_ = from.length_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      ratio_ = from.ratio_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_length_a_ = from.max_length_a_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_length_b_ = from.max_length_b_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_force_ = from.max_force_;
    }
    if (cached_has_bits & 0x10000000u) {
      joint1_ = from.joint1_;
    }
    if (cached_has_bits & 0x20000000u) {
      joint2_ = from.joint2_;
    }
    if (cached_has_bits & 0x40000000u) {
      spring_frequency_ = from.spring_frequency_;
    }
    if (cached_has_bits & 0x80000000u) {
      spring_damping_ratio_ = from.spring_damping_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      max_torque_ = from.max_torque_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_length_ = from.max_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PbJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbJoint::CopyFrom(const PbJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbJoint::IsInitialized() const {
  if ((_has_bits_[1] & 0x00000004) != 0x00000004) return false;
  if (has_local_anchor_a()) {
    if (!this->local_anchor_a_->IsInitialized()) return false;
  }
  if (has_local_anchor_b()) {
    if (!this->local_anchor_b_->IsInitialized()) return false;
  }
  if (has_local_axis_a()) {
    if (!this->local_axis_a_->IsInitialized()) return false;
  }
  if (has_ground_anchor_a()) {
    if (!this->ground_anchor_a_->IsInitialized()) return false;
  }
  if (has_ground_anchor_b()) {
    if (!this->ground_anchor_b_->IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target_->IsInitialized()) return false;
  }
  return true;
}

void PbJoint::Swap(PbJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbJoint::InternalSwap(PbJoint* other) {
  using std::swap;
  bodies_.InternalSwap(&other->bodies_);
  joints_.InternalSwap(&other->joints_);
  swap(local_anchor_a_, other->local_anchor_a_);
  swap(local_anchor_b_, other->local_anchor_b_);
  swap(local_axis_a_, other->local_axis_a_);
  swap(ground_anchor_a_, other->ground_anchor_a_);
  swap(ground_anchor_b_, other->ground_anchor_b_);
  swap(target_, other->target_);
  swap(tag_, other->tag_);
  swap(body_a_, other->body_a_);
  swap(body_b_, other->body_b_);
  swap(ref_angle_, other->ref_angle_);
  swap(collideconnected_, other->collideconnected_);
  swap(enable_limit_, other->enable_limit_);
  swap(enable_motor_, other->enable_motor_);
  swap(lower_limit_, other->lower_limit_);
  swap(upper_limit_, other->upper_limit_);
  swap(motor_speed_, other->motor_speed_);
  swap(max_motor_torque_, other->max_motor_torque_);
  swap(max_motor_force_, other->max_motor_force_);
  swap(length_, other->length_);
  swap(frequency_, other->frequency_);
  swap(damping_ratio_, other->damping_ratio_);
  swap(target_volume_, other->target_volume_);
  swap(length_a_, other->length_a_);
  swap(length_b_, other->length_b_);
  swap(ratio_, other->ratio_);
  swap(max_length_a_, other->max_length_a_);
  swap(max_length_b_, other->max_length_b_);
  swap(max_force_, other->max_force_);
  swap(joint1_, other->joint1_);
  swap(joint2_, other->joint2_);
  swap(spring_frequency_, other->spring_frequency_);
  swap(spring_damping_ratio_, other->spring_damping_ratio_);
  swap(max_torque_, other->max_torque_);
  swap(max_length_, other->max_length_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbJoint::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbBody::InitAsDefaultInstance() {
  ::box2d::_PbBody_default_instance_._instance.get_mutable()->position_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbBody_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbBody_default_instance_._instance.get_mutable()->force_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbBody::kTagFieldNumber;
const int PbBody::kTypeFieldNumber;
const int PbBody::kPositionFieldNumber;
const int PbBody::kAngleFieldNumber;
const int PbBody::kLinearVelocityFieldNumber;
const int PbBody::kAngularVelocityFieldNumber;
const int PbBody::kForceFieldNumber;
const int PbBody::kTorqueFieldNumber;
const int PbBody::kMassFieldNumber;
const int PbBody::kIFieldNumber;
const int PbBody::kLinearDampingFieldNumber;
const int PbBody::kAngularDampingFieldNumber;
const int PbBody::kGravityScaleFieldNumber;
const int PbBody::kBulletFieldNumber;
const int PbBody::kAllowSleepFieldNumber;
const int PbBody::kAwakeFieldNumber;
const int PbBody::kActiveFieldNumber;
const int PbBody::kFixedRotationFieldNumber;
const int PbBody::kUUIDFieldNumber;
const int PbBody::kFixturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbBody::PbBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbBody();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbBody)
}
PbBody::PbBody(const PbBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fixtures_(from.fixtures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_position()) {
    position_ = new ::box2d::PbVec2(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::box2d::PbVec2(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_force()) {
    force_ = new ::box2d::PbVec2(*from.force_);
  } else {
    force_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbBody)
}

void PbBody::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&position_)) + sizeof(active_));
}

PbBody::~PbBody() {
  // @@protoc_insertion_point(destructor:box2d.PbBody)
  SharedDtor();
}

void PbBody::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete force_;
}

void PbBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbBody::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbBody& PbBody::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbBody();
  return *internal_default_instance();
}

PbBody* PbBody::New(::google::protobuf::Arena* arena) const {
  PbBody* n = new PbBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbBody::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fixtures_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(force_ != NULL);
      force_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_velocity_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(angular_velocity_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bullet_) -
        reinterpret_cast<char*>(&torque_)) + sizeof(bullet_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&allow_sleep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&allow_sleep_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .box2d.PbBodyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::box2d::PbBodyType_IsValid(value)) {
            set_type(static_cast< ::box2d::PbBodyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 position = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 linear_velocity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_velocity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_angular_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 force = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float torque = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mass = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_mass();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float I = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_i();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float linear_damping = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {
          set_has_linear_damping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_damping = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {
          set_has_angular_damping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gravity_scale = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 421 & 0xFF */)) {
          set_has_gravity_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravity_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bullet = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_bullet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bullet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_sleep = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_allow_sleep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_sleep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool awake = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_awake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fixed_rotation = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_fixed_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "box2d.PbBody.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .box2d.PbFixture fixtures = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fixtures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbBody)
  return false;
#undef DO_
}

void PbBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // required .box2d.PbBodyType type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .box2d.PbVec2 position = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->position_, output);
  }

  // optional float angle = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->angle(), output);
  }

  // optional .box2d.PbVec2 linear_velocity = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->linear_velocity_, output);
  }

  // optional float angular_velocity = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->angular_velocity(), output);
  }

  // optional .box2d.PbVec2 force = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->force_, output);
  }

  // optional float torque = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->torque(), output);
  }

  // optional float mass = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->mass(), output);
  }

  // optional float I = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->i(), output);
  }

  // optional float linear_damping = 50;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->linear_damping(), output);
  }

  // optional float angular_damping = 51;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->angular_damping(), output);
  }

  // optional float gravity_scale = 52;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->gravity_scale(), output);
  }

  // optional bool bullet = 53;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->bullet(), output);
  }

  // optional bool allow_sleep = 54;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->allow_sleep(), output);
  }

  // optional bool awake = 55;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->awake(), output);
  }

  // optional bool active = 56;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->active(), output);
  }

  // optional bool fixed_rotation = 57;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->fixed_rotation(), output);
  }

  // optional string UUID = 60;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "box2d.PbBody.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->uuid(), output);
  }

  // repeated .box2d.PbFixture fixtures = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixtures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->fixtures(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbBody)
}

::google::protobuf::uint8* PbBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // required .box2d.PbBodyType type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .box2d.PbVec2 position = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->position_, deterministic, target);
  }

  // optional float angle = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->angle(), target);
  }

  // optional .box2d.PbVec2 linear_velocity = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->linear_velocity_, deterministic, target);
  }

  // optional float angular_velocity = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->angular_velocity(), target);
  }

  // optional .box2d.PbVec2 force = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->force_, deterministic, target);
  }

  // optional float torque = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->torque(), target);
  }

  // optional float mass = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->mass(), target);
  }

  // optional float I = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->i(), target);
  }

  // optional float linear_damping = 50;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->linear_damping(), target);
  }

  // optional float angular_damping = 51;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->angular_damping(), target);
  }

  // optional float gravity_scale = 52;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->gravity_scale(), target);
  }

  // optional bool bullet = 53;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->bullet(), target);
  }

  // optional bool allow_sleep = 54;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->allow_sleep(), target);
  }

  // optional bool awake = 55;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->awake(), target);
  }

  // optional bool active = 56;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->active(), target);
  }

  // optional bool fixed_rotation = 57;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->fixed_rotation(), target);
  }

  // optional string UUID = 60;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "box2d.PbBody.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->uuid(), target);
  }

  // repeated .box2d.PbFixture fixtures = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixtures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->fixtures(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbBody)
  return target;
}

size_t PbBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .box2d.PbBodyType type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .box2d.PbFixture fixtures = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->fixtures_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fixtures(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string UUID = 60;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .box2d.PbVec2 position = 10;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->position_);
    }

    // optional .box2d.PbVec2 linear_velocity = 12;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->linear_velocity_);
    }

    // optional .box2d.PbVec2 force = 14;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->force_);
    }

    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional float angle = 11;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // optional float angular_velocity = 13;
    if (has_angular_velocity()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float torque = 15;
    if (has_torque()) {
      total_size += 1 + 4;
    }

    // optional float mass = 16;
    if (has_mass()) {
      total_size += 2 + 4;
    }

    // optional float I = 17;
    if (has_i()) {
      total_size += 2 + 4;
    }

    // optional bool fixed_rotation = 57;
    if (has_fixed_rotation()) {
      total_size += 2 + 1;
    }

    // optional float linear_damping = 50;
    if (has_linear_damping()) {
      total_size += 2 + 4;
    }

    // optional float angular_damping = 51;
    if (has_angular_damping()) {
      total_size += 2 + 4;
    }

    // optional float gravity_scale = 52;
    if (has_gravity_scale()) {
      total_size += 2 + 4;
    }

    // optional bool bullet = 53;
    if (has_bullet()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional bool allow_sleep = 54;
    if (has_allow_sleep()) {
      total_size += 2 + 1;
    }

    // optional bool awake = 55;
    if (has_awake()) {
      total_size += 2 + 1;
    }

    // optional bool active = 56;
    if (has_active()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbBody)
  GOOGLE_DCHECK_NE(&from, this);
  const PbBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbBody)
    MergeFrom(*source);
  }
}

void PbBody::MergeFrom(const PbBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fixtures_.MergeFrom(from.fixtures_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::box2d::PbVec2::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity()->::box2d::PbVec2::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_force()->::box2d::PbVec2::MergeFrom(from.force());
    }
    if (cached_has_bits & 0x00000010u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      angular_velocity_ = from.angular_velocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      torque_ = from.torque_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_ = from.mass_;
    }
    if (cached_has_bits & 0x00000400u) {
      i_ = from.i_;
    }
    if (cached_has_bits & 0x00000800u) {
      fixed_rotation_ = from.fixed_rotation_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_damping_ = from.linear_damping_;
    }
    if (cached_has_bits & 0x00002000u) {
      angular_damping_ = from.angular_damping_;
    }
    if (cached_has_bits & 0x00004000u) {
      gravity_scale_ = from.gravity_scale_;
    }
    if (cached_has_bits & 0x00008000u) {
      bullet_ = from.bullet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      allow_sleep_ = from.allow_sleep_;
    }
    if (cached_has_bits & 0x00020000u) {
      awake_ = from.awake_;
    }
    if (cached_has_bits & 0x00040000u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbBody::CopyFrom(const PbBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fixtures())) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity_->IsInitialized()) return false;
  }
  if (has_force()) {
    if (!this->force_->IsInitialized()) return false;
  }
  return true;
}

void PbBody::Swap(PbBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbBody::InternalSwap(PbBody* other) {
  using std::swap;
  fixtures_.InternalSwap(&other->fixtures_);
  uuid_.Swap(&other->uuid_);
  swap(position_, other->position_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(force_, other->force_);
  swap(tag_, other->tag_);
  swap(type_, other->type_);
  swap(angle_, other->angle_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(torque_, other->torque_);
  swap(mass_, other->mass_);
  swap(i_, other->i_);
  swap(fixed_rotation_, other->fixed_rotation_);
  swap(linear_damping_, other->linear_damping_);
  swap(angular_damping_, other->angular_damping_);
  swap(gravity_scale_, other->gravity_scale_);
  swap(bullet_, other->bullet_);
  swap(allow_sleep_, other->allow_sleep_);
  swap(awake_, other->awake_);
  swap(active_, other->active_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbBody::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbWorld::InitAsDefaultInstance() {
  ::box2d::_PbWorld_default_instance_._instance.get_mutable()->gravity_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbWorld::kTagFieldNumber;
const int PbWorld::kGravityFieldNumber;
const int PbWorld::kAllowSleepFieldNumber;
const int PbWorld::kAutoClearForcesFieldNumber;
const int PbWorld::kWarmStartingFieldNumber;
const int PbWorld::kContinuousPhysicsFieldNumber;
const int PbWorld::kSubSteppingFieldNumber;
const int PbWorld::kBodiesFieldNumber;
const int PbWorld::kJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbWorld::PbWorld()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_box2d_2eproto::InitDefaultsPbWorld();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:box2d.PbWorld)
}
PbWorld::PbWorld(const PbWorld& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bodies_(from.bodies_),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gravity()) {
    gravity_ = new ::box2d::PbVec2(*from.gravity_);
  } else {
    gravity_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_stepping_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(sub_stepping_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbWorld)
}

void PbWorld::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gravity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_stepping_) -
      reinterpret_cast<char*>(&gravity_)) + sizeof(sub_stepping_));
}

PbWorld::~PbWorld() {
  // @@protoc_insertion_point(destructor:box2d.PbWorld)
  SharedDtor();
}

void PbWorld::SharedDtor() {
  if (this != internal_default_instance()) delete gravity_;
}

void PbWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbWorld::descriptor() {
  ::protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbWorld& PbWorld::default_instance() {
  ::protobuf_box2d_2eproto::InitDefaultsPbWorld();
  return *internal_default_instance();
}

PbWorld* PbWorld::New(::google::protobuf::Arena* arena) const {
  PbWorld* n = new PbWorld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodies_.Clear();
  joints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gravity_ != NULL);
    gravity_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_stepping_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(sub_stepping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:box2d.PbWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbVec2 gravity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gravity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_sleep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_allow_sleep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_sleep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_clear_forces = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_auto_clear_forces();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_clear_forces_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool warm_starting = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_warm_starting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warm_starting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool continuous_physics = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_continuous_physics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuous_physics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sub_stepping = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sub_stepping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_stepping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .box2d.PbBody bodies = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bodies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .box2d.PbJoint joints = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:box2d.PbWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:box2d.PbWorld)
  return false;
#undef DO_
}

void PbWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:box2d.PbWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // optional .box2d.PbVec2 gravity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gravity_, output);
  }

  // optional bool allow_sleep = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_sleep(), output);
  }

  // optional bool auto_clear_forces = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->auto_clear_forces(), output);
  }

  // optional bool warm_starting = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->warm_starting(), output);
  }

  // optional bool continuous_physics = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->continuous_physics(), output);
  }

  // optional bool sub_stepping = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sub_stepping(), output);
  }

  // repeated .box2d.PbBody bodies = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bodies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bodies(static_cast<int>(i)), output);
  }

  // repeated .box2d.PbJoint joints = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->joints(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:box2d.PbWorld)
}

::google::protobuf::uint8* PbWorld::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // optional .box2d.PbVec2 gravity = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->gravity_, deterministic, target);
  }

  // optional bool allow_sleep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allow_sleep(), target);
  }

  // optional bool auto_clear_forces = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->auto_clear_forces(), target);
  }

  // optional bool warm_starting = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->warm_starting(), target);
  }

  // optional bool continuous_physics = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->continuous_physics(), target);
  }

  // optional bool sub_stepping = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sub_stepping(), target);
  }

  // repeated .box2d.PbBody bodies = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bodies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->bodies(static_cast<int>(i)), deterministic, target);
  }

  // repeated .box2d.PbJoint joints = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->joints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbWorld)
  return target;
}

size_t PbWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .box2d.PbBody bodies = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->bodies_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bodies(static_cast<int>(i)));
    }
  }

  // repeated .box2d.PbJoint joints = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->joints_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joints(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .box2d.PbVec2 gravity = 2;
    if (has_gravity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->gravity_);
    }

    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // optional bool allow_sleep = 3;
    if (has_allow_sleep()) {
      total_size += 1 + 1;
    }

    // optional bool auto_clear_forces = 4;
    if (has_auto_clear_forces()) {
      total_size += 1 + 1;
    }

    // optional bool warm_starting = 5;
    if (has_warm_starting()) {
      total_size += 1 + 1;
    }

    // optional bool continuous_physics = 6;
    if (has_continuous_physics()) {
      total_size += 1 + 1;
    }

    // optional bool sub_stepping = 7;
    if (has_sub_stepping()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbWorld::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const PbWorld* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbWorld>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbWorld)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbWorld)
    MergeFrom(*source);
  }
}

void PbWorld::MergeFrom(const PbWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodies_.MergeFrom(from.bodies_);
  joints_.MergeFrom(from.joints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gravity()->::box2d::PbVec2::MergeFrom(from.gravity());
    }
    if (cached_has_bits & 0x00000002u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      allow_sleep_ = from.allow_sleep_;
    }
    if (cached_has_bits & 0x00000008u) {
      auto_clear_forces_ = from.auto_clear_forces_;
    }
    if (cached_has_bits & 0x00000010u) {
      warm_starting_ = from.warm_starting_;
    }
    if (cached_has_bits & 0x00000020u) {
      continuous_physics_ = from.continuous_physics_;
    }
    if (cached_has_bits & 0x00000040u) {
      sub_stepping_ = from.sub_stepping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbWorld::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbWorld::CopyFrom(const PbWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbWorld::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->bodies())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->joints())) return false;
  if (has_gravity()) {
    if (!this->gravity_->IsInitialized()) return false;
  }
  return true;
}

void PbWorld::Swap(PbWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbWorld::InternalSwap(PbWorld* other) {
  using std::swap;
  bodies_.InternalSwap(&other->bodies_);
  joints_.InternalSwap(&other->joints_);
  swap(gravity_, other->gravity_);
  swap(tag_, other->tag_);
  swap(allow_sleep_, other->allow_sleep_);
  swap(auto_clear_forces_, other->auto_clear_forces_);
  swap(warm_starting_, other->warm_starting_);
  swap(continuous_physics_, other->continuous_physics_);
  swap(sub_stepping_, other->sub_stepping_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbWorld::GetMetadata() const {
  protobuf_box2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_box2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace box2d

// @@protoc_insertion_point(global_scope)
