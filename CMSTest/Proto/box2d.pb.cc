// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "box2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace box2d {

namespace {

const ::google::protobuf::Descriptor* PbVec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbFixture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbFixture_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbJoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbJoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbWorld_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PbBodyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PbShapeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PbJointType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_box2d_2eproto() {
  protobuf_AddDesc_box2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "box2d.proto");
  GOOGLE_CHECK(file != NULL);
  PbVec2_descriptor_ = file->message_type(0);
  static const int PbVec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec2, y_),
  };
  PbVec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVec2_descriptor_,
      PbVec2::default_instance_,
      PbVec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVec2));
  PbFilter_descriptor_ = file->message_type(1);
  static const int PbFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFilter, category_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFilter, mask_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFilter, group_index_),
  };
  PbFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbFilter_descriptor_,
      PbFilter::default_instance_,
      PbFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbFilter));
  PbShape_descriptor_ = file->message_type(2);
  static const int PbShape_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, centroid_),
  };
  PbShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbShape_descriptor_,
      PbShape::default_instance_,
      PbShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbShape));
  PbFixture_descriptor_ = file->message_type(3);
  static const int PbFixture_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, restitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, friction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, shape_),
  };
  PbFixture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbFixture_descriptor_,
      PbFixture::default_instance_,
      PbFixture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFixture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbFixture));
  PbJoint_descriptor_ = file->message_type(4);
  static const int PbJoint_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, body_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, body_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, collideconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, local_anchor_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, local_anchor_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, ref_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, enable_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, lower_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, upper_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, enable_motor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, motor_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_motor_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, local_axis_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_motor_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, damping_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, ground_anchor_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, ground_anchor_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, length_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, length_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_length_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_length_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, joint1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, joint2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, spring_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, spring_damping_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, max_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, bodies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, target_volume_),
  };
  PbJoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbJoint_descriptor_,
      PbJoint::default_instance_,
      PbJoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbJoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbJoint));
  PbBody_descriptor_ = file->message_type(5);
  static const int PbBody_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, linear_damping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, angular_damping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, gravity_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, bullet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, allow_sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, awake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, fixed_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, fixtures_),
  };
  PbBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbBody_descriptor_,
      PbBody::default_instance_,
      PbBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbBody));
  PbWorld_descriptor_ = file->message_type(6);
  static const int PbWorld_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, gravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, allow_sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, auto_clear_forces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, warm_starting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, continuous_physics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, sub_stepping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, bodies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, joints_),
  };
  PbWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbWorld_descriptor_,
      PbWorld::default_instance_,
      PbWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbWorld));
  PbBodyType_descriptor_ = file->enum_type(0);
  PbShapeType_descriptor_ = file->enum_type(1);
  PbJointType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_box2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVec2_descriptor_, &PbVec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbFilter_descriptor_, &PbFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbShape_descriptor_, &PbShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbFixture_descriptor_, &PbFixture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbJoint_descriptor_, &PbJoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbBody_descriptor_, &PbBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbWorld_descriptor_, &PbWorld::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_box2d_2eproto() {
  delete PbVec2::default_instance_;
  delete PbVec2_reflection_;
  delete PbFilter::default_instance_;
  delete PbFilter_reflection_;
  delete PbShape::default_instance_;
  delete PbShape_reflection_;
  delete PbFixture::default_instance_;
  delete PbFixture_reflection_;
  delete PbJoint::default_instance_;
  delete PbJoint_reflection_;
  delete PbBody::default_instance_;
  delete PbBody_reflection_;
  delete PbWorld::default_instance_;
  delete PbWorld_reflection_;
}

void protobuf_AddDesc_box2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013box2d.proto\022\005box2d\"\036\n\006PbVec2\022\t\n\001x\030\001 \002("
    "\002\022\t\n\001y\030\002 \002(\002\"I\n\010PbFilter\022\025\n\rcategory_bit"
    "s\030\001 \001(\005\022\021\n\tmask_bits\030\002 \001(\005\022\023\n\013group_inde"
    "x\030\003 \001(\005\"\307\001\n\007PbShape\022\013\n\003tag\030\001 \001(\003\022 \n\004type"
    "\030\002 \002(\0162\022.box2d.PbShapeType\022\035\n\006center\030\n \001"
    "(\0132\r.box2d.PbVec2\022\016\n\006radius\030\013 \001(\002\022\035\n\006poi"
    "nts\030\024 \003(\0132\r.box2d.PbVec2\022\036\n\007normals\030\025 \003("
    "\0132\r.box2d.PbVec2\022\037\n\010centroid\030\026 \001(\0132\r.box"
    "2d.PbVec2\"\240\001\n\tPbFixture\022\013\n\003tag\030\001 \001(\003\022\023\n\013"
    "restitution\030\002 \001(\002\022\020\n\010friction\030\003 \001(\002\022\017\n\007d"
    "ensity\030\004 \001(\002\022\016\n\006sensor\030\005 \001(\010\022\037\n\006filter\030\n"
    " \001(\0132\017.box2d.PbFilter\022\035\n\005shape\030\013 \001(\0132\016.b"
    "ox2d.PbShape\"\350\006\n\007PbJoint\022\013\n\003tag\030\001 \001(\003\022 \n"
    "\004type\030\002 \002(\0162\022.box2d.PbJointType\022\016\n\006body_"
    "a\030\003 \001(\005\022\016\n\006body_b\030\004 \001(\005\022\030\n\020collideConnec"
    "ted\030\005 \001(\010\022%\n\016local_anchor_a\030\006 \001(\0132\r.box2"
    "d.PbVec2\022%\n\016local_anchor_b\030\007 \001(\0132\r.box2d"
    ".PbVec2\022\021\n\tref_angle\030\n \001(\002\022\024\n\014enable_lim"
    "it\030\014 \001(\010\022\023\n\013lower_limit\030\r \001(\002\022\023\n\013upper_l"
    "imit\030\016 \001(\002\022\024\n\014enable_motor\030\017 \001(\010\022\023\n\013moto"
    "r_speed\030\020 \001(\002\022\030\n\020max_motor_torque\030\021 \001(\002\022"
    "#\n\014local_axis_a\030\024 \001(\0132\r.box2d.PbVec2\022\027\n\017"
    "max_motor_force\030\025 \001(\002\022\016\n\006length\030\036 \001(\002\022\021\n"
    "\tfrequency\030\037 \001(\002\022\025\n\rdamping_ratio\030  \001(\002\022"
    "&\n\017ground_anchor_a\030( \001(\0132\r.box2d.PbVec2\022"
    "&\n\017ground_anchor_b\030) \001(\0132\r.box2d.PbVec2\022"
    "\020\n\010length_a\030* \001(\002\022\020\n\010length_b\030+ \001(\002\022\r\n\005r"
    "atio\030, \001(\002\022\024\n\014max_length_a\030- \001(\002\022\024\n\014max_"
    "length_b\030. \001(\002\022\035\n\006target\0302 \001(\0132\r.box2d.P"
    "bVec2\022\021\n\tmax_force\0303 \001(\002\022\016\n\006joint1\030= \001(\005"
    "\022\016\n\006joint2\030> \001(\005\022\030\n\020spring_frequency\030F \001"
    "(\002\022\034\n\024spring_damping_ratio\030G \001(\002\022\022\n\nmax_"
    "torque\030Z \001(\002\022\022\n\nmax_length\030d \001(\002\022\016\n\006bodi"
    "es\030n \003(\005\022\016\n\006joints\030o \003(\005\022\025\n\rtarget_volum"
    "e\030p \001(\002\"\305\003\n\006PbBody\022\013\n\003tag\030\001 \001(\003\022\037\n\004type\030"
    "\002 \002(\0162\021.box2d.PbBodyType\022\037\n\010position\030\n \001"
    "(\0132\r.box2d.PbVec2\022\r\n\005angle\030\013 \001(\002\022&\n\017line"
    "ar_velocity\030\014 \001(\0132\r.box2d.PbVec2\022\030\n\020angu"
    "lar_velocity\030\r \001(\002\022\034\n\005force\030\016 \001(\0132\r.box2"
    "d.PbVec2\022\016\n\006torque\030\017 \001(\002\022\014\n\004mass\030\020 \001(\002\022\t"
    "\n\001I\030\021 \001(\002\022\026\n\016linear_damping\0302 \001(\002\022\027\n\017ang"
    "ular_damping\0303 \001(\002\022\025\n\rgravity_scale\0304 \001("
    "\002\022\016\n\006bullet\0305 \001(\010\022\023\n\013allow_sleep\0306 \001(\010\022\r"
    "\n\005awake\0307 \001(\010\022\016\n\006active\0308 \001(\010\022\026\n\016fixed_r"
    "otation\0309 \001(\010\022\014\n\004UUID\030< \001(\t\022\"\n\010fixtures\030"
    "d \003(\0132\020.box2d.PbFixture\"\356\001\n\007PbWorld\022\013\n\003t"
    "ag\030\001 \001(\003\022\036\n\007gravity\030\002 \001(\0132\r.box2d.PbVec2"
    "\022\023\n\013allow_sleep\030\003 \001(\010\022\031\n\021auto_clear_forc"
    "es\030\004 \001(\010\022\025\n\rwarm_starting\030\005 \001(\010\022\032\n\022conti"
    "nuous_physics\030\006 \001(\010\022\024\n\014sub_stepping\030\007 \001("
    "\010\022\035\n\006bodies\030\024 \003(\0132\r.box2d.PbBody\022\036\n\006join"
    "ts\030\025 \003(\0132\016.box2d.PbJoint*4\n\nPbBodyType\022\n"
    "\n\006STATIC\020\000\022\013\n\007DYNAMIC\020\001\022\r\n\tKINEMATIC\020\002*:"
    "\n\013PbShapeType\022\n\n\006CIRCLE\020\001\022\013\n\007POLYGON\020\002\022\010"
    "\n\004EDGE\020\003\022\010\n\004LOOP\020\004*\245\001\n\013PbJointType\022\014\n\010DI"
    "STANCE\020\001\022\014\n\010REVOLUTE\020\002\022\r\n\tPRISMATIC\020\003\022\n\n"
    "\006PULLEY\020\004\022\t\n\005MOUSE\020\005\022\010\n\004GEAR\020\006\022\t\n\005WHEEL\020"
    "\007\022\010\n\004WELD\020\010\022\014\n\010FRICTION\020\t\022\010\n\004ROPE\020\n\022\023\n\017C"
    "ONSTANT_VOLUME\020\013\022\010\n\004LINE\020\014B\030\n\017org.box2d."
    "protoB\005Box2D", 2372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "box2d.proto", &protobuf_RegisterTypes);
  PbVec2::default_instance_ = new PbVec2();
  PbFilter::default_instance_ = new PbFilter();
  PbShape::default_instance_ = new PbShape();
  PbFixture::default_instance_ = new PbFixture();
  PbJoint::default_instance_ = new PbJoint();
  PbBody::default_instance_ = new PbBody();
  PbWorld::default_instance_ = new PbWorld();
  PbVec2::default_instance_->InitAsDefaultInstance();
  PbFilter::default_instance_->InitAsDefaultInstance();
  PbShape::default_instance_->InitAsDefaultInstance();
  PbFixture::default_instance_->InitAsDefaultInstance();
  PbJoint::default_instance_->InitAsDefaultInstance();
  PbBody::default_instance_->InitAsDefaultInstance();
  PbWorld::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_box2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_box2d_2eproto {
  StaticDescriptorInitializer_box2d_2eproto() {
    protobuf_AddDesc_box2d_2eproto();
  }
} static_descriptor_initializer_box2d_2eproto_;
const ::google::protobuf::EnumDescriptor* PbBodyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbBodyType_descriptor_;
}
bool PbBodyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PbShapeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbShapeType_descriptor_;
}
bool PbShapeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PbJointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbJointType_descriptor_;
}
bool PbJointType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PbVec2::kXFieldNumber;
const int PbVec2::kYFieldNumber;
#endif  // !_MSC_VER

PbVec2::PbVec2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbVec2::InitAsDefaultInstance() {
}

PbVec2::PbVec2(const PbVec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbVec2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVec2::~PbVec2() {
  SharedDtor();
}

void PbVec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVec2_descriptor_;
}

const PbVec2& PbVec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbVec2* PbVec2::default_instance_ = NULL;

PbVec2* PbVec2::New() const {
  return new PbVec2;
}

void PbVec2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbVec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbVec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbVec2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVec2::MergeFrom(const PbVec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVec2::CopyFrom(const PbVec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbVec2::Swap(PbVec2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVec2_descriptor_;
  metadata.reflection = PbVec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbFilter::kCategoryBitsFieldNumber;
const int PbFilter::kMaskBitsFieldNumber;
const int PbFilter::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

PbFilter::PbFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbFilter::InitAsDefaultInstance() {
}

PbFilter::PbFilter(const PbFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbFilter::SharedCtor() {
  _cached_size_ = 0;
  category_bits_ = 0;
  mask_bits_ = 0;
  group_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbFilter::~PbFilter() {
  SharedDtor();
}

void PbFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbFilter_descriptor_;
}

const PbFilter& PbFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbFilter* PbFilter::default_instance_ = NULL;

PbFilter* PbFilter::New() const {
  return new PbFilter;
}

void PbFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    category_bits_ = 0;
    mask_bits_ = 0;
    group_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_bits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_bits_)));
          set_has_category_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mask_bits;
        break;
      }

      // optional int32 mask_bits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_bits_)));
          set_has_mask_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_index;
        break;
      }

      // optional int32 group_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_index_)));
          set_has_group_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 category_bits = 1;
  if (has_category_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_bits(), output);
  }

  // optional int32 mask_bits = 2;
  if (has_mask_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mask_bits(), output);
  }

  // optional int32 group_index = 3;
  if (has_group_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 category_bits = 1;
  if (has_category_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_bits(), target);
  }

  // optional int32 mask_bits = 2;
  if (has_mask_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mask_bits(), target);
  }

  // optional int32 group_index = 3;
  if (has_group_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 category_bits = 1;
    if (has_category_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_bits());
    }

    // optional int32 mask_bits = 2;
    if (has_mask_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_bits());
    }

    // optional int32 group_index = 3;
    if (has_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbFilter::MergeFrom(const PbFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_bits()) {
      set_category_bits(from.category_bits());
    }
    if (from.has_mask_bits()) {
      set_mask_bits(from.mask_bits());
    }
    if (from.has_group_index()) {
      set_group_index(from.group_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFilter::CopyFrom(const PbFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFilter::IsInitialized() const {

  return true;
}

void PbFilter::Swap(PbFilter* other) {
  if (other != this) {
    std::swap(category_bits_, other->category_bits_);
    std::swap(mask_bits_, other->mask_bits_);
    std::swap(group_index_, other->group_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbFilter_descriptor_;
  metadata.reflection = PbFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbShape::kTagFieldNumber;
const int PbShape::kTypeFieldNumber;
const int PbShape::kCenterFieldNumber;
const int PbShape::kRadiusFieldNumber;
const int PbShape::kPointsFieldNumber;
const int PbShape::kNormalsFieldNumber;
const int PbShape::kCentroidFieldNumber;
#endif  // !_MSC_VER

PbShape::PbShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbShape::InitAsDefaultInstance() {
  center_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  centroid_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
}

PbShape::PbShape(const PbShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbShape::SharedCtor() {
  _cached_size_ = 0;
  tag_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  center_ = NULL;
  radius_ = 0;
  centroid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbShape::~PbShape() {
  SharedDtor();
}

void PbShape::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
    delete centroid_;
  }
}

void PbShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbShape_descriptor_;
}

const PbShape& PbShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbShape* PbShape::default_instance_ = NULL;

PbShape* PbShape::New() const {
  return new PbShape;
}

void PbShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_center()) {
      if (center_ != NULL) center_->::box2d::PbVec2::Clear();
    }
    radius_ = 0;
    if (has_centroid()) {
      if (centroid_ != NULL) centroid_->::box2d::PbVec2::Clear();
    }
  }
  points_.Clear();
  normals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .box2d.PbShapeType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::box2d::PbShapeType_IsValid(value)) {
            set_type(static_cast< ::box2d::PbShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_center;
        break;
      }

      // optional .box2d.PbVec2 center = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_radius;
        break;
      }

      // optional float radius = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_points;
        break;
      }

      // repeated .box2d.PbVec2 points = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_points;
        if (input->ExpectTag(170)) goto parse_normals;
        break;
      }

      // repeated .box2d.PbVec2 normals = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_normals;
        if (input->ExpectTag(178)) goto parse_centroid;
        break;
      }

      // optional .box2d.PbVec2 centroid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_centroid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centroid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // required .box2d.PbShapeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .box2d.PbVec2 center = 10;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->center(), output);
  }

  // optional float radius = 11;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->radius(), output);
  }

  // repeated .box2d.PbVec2 points = 20;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->points(i), output);
  }

  // repeated .box2d.PbVec2 normals = 21;
  for (int i = 0; i < this->normals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->normals(i), output);
  }

  // optional .box2d.PbVec2 centroid = 22;
  if (has_centroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->centroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // required .box2d.PbShapeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .box2d.PbVec2 center = 10;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->center(), target);
  }

  // optional float radius = 11;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->radius(), target);
  }

  // repeated .box2d.PbVec2 points = 20;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->points(i), target);
  }

  // repeated .box2d.PbVec2 normals = 21;
  for (int i = 0; i < this->normals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->normals(i), target);
  }

  // optional .box2d.PbVec2 centroid = 22;
  if (has_centroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->centroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // required .box2d.PbShapeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .box2d.PbVec2 center = 10;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional float radius = 11;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional .box2d.PbVec2 centroid = 22;
    if (has_centroid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centroid());
    }

  }
  // repeated .box2d.PbVec2 points = 20;
  total_size += 2 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  // repeated .box2d.PbVec2 normals = 21;
  total_size += 2 * this->normals_size();
  for (int i = 0; i < this->normals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbShape::MergeFrom(const PbShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  normals_.MergeFrom(from.normals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_center()) {
      mutable_center()->::box2d::PbVec2::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_centroid()) {
      mutable_centroid()->::box2d::PbVec2::MergeFrom(from.centroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbShape::CopyFrom(const PbShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  for (int i = 0; i < normals_size(); i++) {
    if (!this->normals(i).IsInitialized()) return false;
  }
  if (has_centroid()) {
    if (!this->centroid().IsInitialized()) return false;
  }
  return true;
}

void PbShape::Swap(PbShape* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(type_, other->type_);
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    points_.Swap(&other->points_);
    normals_.Swap(&other->normals_);
    std::swap(centroid_, other->centroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbShape_descriptor_;
  metadata.reflection = PbShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbFixture::kTagFieldNumber;
const int PbFixture::kRestitutionFieldNumber;
const int PbFixture::kFrictionFieldNumber;
const int PbFixture::kDensityFieldNumber;
const int PbFixture::kSensorFieldNumber;
const int PbFixture::kFilterFieldNumber;
const int PbFixture::kShapeFieldNumber;
#endif  // !_MSC_VER

PbFixture::PbFixture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbFixture::InitAsDefaultInstance() {
  filter_ = const_cast< ::box2d::PbFilter*>(&::box2d::PbFilter::default_instance());
  shape_ = const_cast< ::box2d::PbShape*>(&::box2d::PbShape::default_instance());
}

PbFixture::PbFixture(const PbFixture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbFixture::SharedCtor() {
  _cached_size_ = 0;
  tag_ = GOOGLE_LONGLONG(0);
  restitution_ = 0;
  friction_ = 0;
  density_ = 0;
  sensor_ = false;
  filter_ = NULL;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbFixture::~PbFixture() {
  SharedDtor();
}

void PbFixture::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
    delete shape_;
  }
}

void PbFixture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFixture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbFixture_descriptor_;
}

const PbFixture& PbFixture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbFixture* PbFixture::default_instance_ = NULL;

PbFixture* PbFixture::New() const {
  return new PbFixture;
}

void PbFixture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = GOOGLE_LONGLONG(0);
    restitution_ = 0;
    friction_ = 0;
    density_ = 0;
    sensor_ = false;
    if (has_filter()) {
      if (filter_ != NULL) filter_->::box2d::PbFilter::Clear();
    }
    if (has_shape()) {
      if (shape_ != NULL) shape_->::box2d::PbShape::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbFixture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_restitution;
        break;
      }

      // optional float restitution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_restitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restitution_)));
          set_has_restitution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_friction;
        break;
      }

      // optional float friction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_friction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &friction_)));
          set_has_friction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_density;
        break;
      }

      // optional float density = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sensor;
        break;
      }

      // optional bool sensor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_)));
          set_has_sensor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_filter;
        break;
      }

      // optional .box2d.PbFilter filter = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shape;
        break;
      }

      // optional .box2d.PbShape shape = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbFixture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // optional float restitution = 2;
  if (has_restitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->restitution(), output);
  }

  // optional float friction = 3;
  if (has_friction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->friction(), output);
  }

  // optional float density = 4;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->density(), output);
  }

  // optional bool sensor = 5;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sensor(), output);
  }

  // optional .box2d.PbFilter filter = 10;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->filter(), output);
  }

  // optional .box2d.PbShape shape = 11;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbFixture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // optional float restitution = 2;
  if (has_restitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->restitution(), target);
  }

  // optional float friction = 3;
  if (has_friction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->friction(), target);
  }

  // optional float density = 4;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->density(), target);
  }

  // optional bool sensor = 5;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sensor(), target);
  }

  // optional .box2d.PbFilter filter = 10;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->filter(), target);
  }

  // optional .box2d.PbShape shape = 11;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbFixture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // optional float restitution = 2;
    if (has_restitution()) {
      total_size += 1 + 4;
    }

    // optional float friction = 3;
    if (has_friction()) {
      total_size += 1 + 4;
    }

    // optional float density = 4;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // optional bool sensor = 5;
    if (has_sensor()) {
      total_size += 1 + 1;
    }

    // optional .box2d.PbFilter filter = 10;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional .box2d.PbShape shape = 11;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFixture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbFixture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbFixture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbFixture::MergeFrom(const PbFixture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_restitution()) {
      set_restitution(from.restitution());
    }
    if (from.has_friction()) {
      set_friction(from.friction());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_sensor()) {
      set_sensor(from.sensor());
    }
    if (from.has_filter()) {
      mutable_filter()->::box2d::PbFilter::MergeFrom(from.filter());
    }
    if (from.has_shape()) {
      mutable_shape()->::box2d::PbShape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbFixture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFixture::CopyFrom(const PbFixture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFixture::IsInitialized() const {

  if (has_shape()) {
    if (!this->shape().IsInitialized()) return false;
  }
  return true;
}

void PbFixture::Swap(PbFixture* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(restitution_, other->restitution_);
    std::swap(friction_, other->friction_);
    std::swap(density_, other->density_);
    std::swap(sensor_, other->sensor_);
    std::swap(filter_, other->filter_);
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbFixture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbFixture_descriptor_;
  metadata.reflection = PbFixture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbJoint::kTagFieldNumber;
const int PbJoint::kTypeFieldNumber;
const int PbJoint::kBodyAFieldNumber;
const int PbJoint::kBodyBFieldNumber;
const int PbJoint::kCollideConnectedFieldNumber;
const int PbJoint::kLocalAnchorAFieldNumber;
const int PbJoint::kLocalAnchorBFieldNumber;
const int PbJoint::kRefAngleFieldNumber;
const int PbJoint::kEnableLimitFieldNumber;
const int PbJoint::kLowerLimitFieldNumber;
const int PbJoint::kUpperLimitFieldNumber;
const int PbJoint::kEnableMotorFieldNumber;
const int PbJoint::kMotorSpeedFieldNumber;
const int PbJoint::kMaxMotorTorqueFieldNumber;
const int PbJoint::kLocalAxisAFieldNumber;
const int PbJoint::kMaxMotorForceFieldNumber;
const int PbJoint::kLengthFieldNumber;
const int PbJoint::kFrequencyFieldNumber;
const int PbJoint::kDampingRatioFieldNumber;
const int PbJoint::kGroundAnchorAFieldNumber;
const int PbJoint::kGroundAnchorBFieldNumber;
const int PbJoint::kLengthAFieldNumber;
const int PbJoint::kLengthBFieldNumber;
const int PbJoint::kRatioFieldNumber;
const int PbJoint::kMaxLengthAFieldNumber;
const int PbJoint::kMaxLengthBFieldNumber;
const int PbJoint::kTargetFieldNumber;
const int PbJoint::kMaxForceFieldNumber;
const int PbJoint::kJoint1FieldNumber;
const int PbJoint::kJoint2FieldNumber;
const int PbJoint::kSpringFrequencyFieldNumber;
const int PbJoint::kSpringDampingRatioFieldNumber;
const int PbJoint::kMaxTorqueFieldNumber;
const int PbJoint::kMaxLengthFieldNumber;
const int PbJoint::kBodiesFieldNumber;
const int PbJoint::kJointsFieldNumber;
const int PbJoint::kTargetVolumeFieldNumber;
#endif  // !_MSC_VER

PbJoint::PbJoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbJoint::InitAsDefaultInstance() {
  local_anchor_a_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  local_anchor_b_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  local_axis_a_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  ground_anchor_a_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  ground_anchor_b_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  target_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
}

PbJoint::PbJoint(const PbJoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbJoint::SharedCtor() {
  _cached_size_ = 0;
  tag_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  body_a_ = 0;
  body_b_ = 0;
  collideconnected_ = false;
  local_anchor_a_ = NULL;
  local_anchor_b_ = NULL;
  ref_angle_ = 0;
  enable_limit_ = false;
  lower_limit_ = 0;
  upper_limit_ = 0;
  enable_motor_ = false;
  motor_speed_ = 0;
  max_motor_torque_ = 0;
  local_axis_a_ = NULL;
  max_motor_force_ = 0;
  length_ = 0;
  frequency_ = 0;
  damping_ratio_ = 0;
  ground_anchor_a_ = NULL;
  ground_anchor_b_ = NULL;
  length_a_ = 0;
  length_b_ = 0;
  ratio_ = 0;
  max_length_a_ = 0;
  max_length_b_ = 0;
  target_ = NULL;
  max_force_ = 0;
  joint1_ = 0;
  joint2_ = 0;
  spring_frequency_ = 0;
  spring_damping_ratio_ = 0;
  max_torque_ = 0;
  max_length_ = 0;
  target_volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbJoint::~PbJoint() {
  SharedDtor();
}

void PbJoint::SharedDtor() {
  if (this != default_instance_) {
    delete local_anchor_a_;
    delete local_anchor_b_;
    delete local_axis_a_;
    delete ground_anchor_a_;
    delete ground_anchor_b_;
    delete target_;
  }
}

void PbJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbJoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbJoint_descriptor_;
}

const PbJoint& PbJoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbJoint* PbJoint::default_instance_ = NULL;

PbJoint* PbJoint::New() const {
  return new PbJoint;
}

void PbJoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    body_a_ = 0;
    body_b_ = 0;
    collideconnected_ = false;
    if (has_local_anchor_a()) {
      if (local_anchor_a_ != NULL) local_anchor_a_->::box2d::PbVec2::Clear();
    }
    if (has_local_anchor_b()) {
      if (local_anchor_b_ != NULL) local_anchor_b_->::box2d::PbVec2::Clear();
    }
    ref_angle_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enable_limit_ = false;
    lower_limit_ = 0;
    upper_limit_ = 0;
    enable_motor_ = false;
    motor_speed_ = 0;
    max_motor_torque_ = 0;
    if (has_local_axis_a()) {
      if (local_axis_a_ != NULL) local_axis_a_->::box2d::PbVec2::Clear();
    }
    max_motor_force_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    length_ = 0;
    frequency_ = 0;
    damping_ratio_ = 0;
    if (has_ground_anchor_a()) {
      if (ground_anchor_a_ != NULL) ground_anchor_a_->::box2d::PbVec2::Clear();
    }
    if (has_ground_anchor_b()) {
      if (ground_anchor_b_ != NULL) ground_anchor_b_->::box2d::PbVec2::Clear();
    }
    length_a_ = 0;
    length_b_ = 0;
    ratio_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    max_length_a_ = 0;
    max_length_b_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::box2d::PbVec2::Clear();
    }
    max_force_ = 0;
    joint1_ = 0;
    joint2_ = 0;
    spring_frequency_ = 0;
    spring_damping_ratio_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    max_torque_ = 0;
    max_length_ = 0;
    target_volume_ = 0;
  }
  bodies_.Clear();
  joints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .box2d.PbJointType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::box2d::PbJointType_IsValid(value)) {
            set_type(static_cast< ::box2d::PbJointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_body_a;
        break;
      }

      // optional int32 body_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_a_)));
          set_has_body_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_body_b;
        break;
      }

      // optional int32 body_b = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_b_)));
          set_has_body_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_collideConnected;
        break;
      }

      // optional bool collideConnected = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collideConnected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collideconnected_)));
          set_has_collideconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_local_anchor_a;
        break;
      }

      // optional .box2d.PbVec2 local_anchor_a = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_anchor_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_anchor_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_local_anchor_b;
        break;
      }

      // optional .box2d.PbVec2 local_anchor_b = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_anchor_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_anchor_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ref_angle;
        break;
      }

      // optional float ref_angle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ref_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ref_angle_)));
          set_has_ref_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_enable_limit;
        break;
      }

      // optional bool enable_limit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_limit_)));
          set_has_enable_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_lower_limit;
        break;
      }

      // optional float lower_limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lower_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_limit_)));
          set_has_lower_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_upper_limit;
        break;
      }

      // optional float upper_limit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_upper_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_limit_)));
          set_has_upper_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_enable_motor;
        break;
      }

      // optional bool enable_motor = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_motor_)));
          set_has_enable_motor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_motor_speed;
        break;
      }

      // optional float motor_speed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motor_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_speed_)));
          set_has_motor_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_max_motor_torque;
        break;
      }

      // optional float max_motor_torque = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_motor_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_motor_torque_)));
          set_has_max_motor_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_local_axis_a;
        break;
      }

      // optional .box2d.PbVec2 local_axis_a = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_axis_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_axis_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_max_motor_force;
        break;
      }

      // optional float max_motor_force = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_motor_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_motor_force_)));
          set_has_max_motor_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_length;
        break;
      }

      // optional float length = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_frequency;
        break;
      }

      // optional float frequency = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_damping_ratio;
        break;
      }

      // optional float damping_ratio = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_damping_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damping_ratio_)));
          set_has_damping_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_ground_anchor_a;
        break;
      }

      // optional .box2d.PbVec2 ground_anchor_a = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ground_anchor_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ground_anchor_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_ground_anchor_b;
        break;
      }

      // optional .box2d.PbVec2 ground_anchor_b = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ground_anchor_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ground_anchor_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_length_a;
        break;
      }

      // optional float length_a = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_a_)));
          set_has_length_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_length_b;
        break;
      }

      // optional float length_b = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_b_)));
          set_has_length_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_ratio;
        break;
      }

      // optional float ratio = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_max_length_a;
        break;
      }

      // optional float max_length_a = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_length_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_a_)));
          set_has_max_length_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(373)) goto parse_max_length_b;
        break;
      }

      // optional float max_length_b = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_length_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_b_)));
          set_has_max_length_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_target;
        break;
      }

      // optional .box2d.PbVec2 target = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_max_force;
        break;
      }

      // optional float max_force = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_force_)));
          set_has_max_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_joint1;
        break;
      }

      // optional int32 joint1 = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joint1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joint1_)));
          set_has_joint1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_joint2;
        break;
      }

      // optional int32 joint2 = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joint2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joint2_)));
          set_has_joint2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(565)) goto parse_spring_frequency;
        break;
      }

      // optional float spring_frequency = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spring_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spring_frequency_)));
          set_has_spring_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(573)) goto parse_spring_damping_ratio;
        break;
      }

      // optional float spring_damping_ratio = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spring_damping_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spring_damping_ratio_)));
          set_has_spring_damping_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(725)) goto parse_max_torque;
        break;
      }

      // optional float max_torque = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_torque_)));
          set_has_max_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(805)) goto parse_max_length;
        break;
      }

      // optional float max_length = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_)));
          set_has_max_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_bodies;
        break;
      }

      // repeated int32 bodies = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 880, input, this->mutable_bodies())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bodies())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_bodies;
        if (input->ExpectTag(888)) goto parse_joints;
        break;
      }

      // repeated int32 joints = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 888, input, this->mutable_joints())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_joints())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_joints;
        if (input->ExpectTag(901)) goto parse_target_volume;
        break;
      }

      // optional float target_volume = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_target_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_volume_)));
          set_has_target_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // required .box2d.PbJointType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 body_a = 3;
  if (has_body_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->body_a(), output);
  }

  // optional int32 body_b = 4;
  if (has_body_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->body_b(), output);
  }

  // optional bool collideConnected = 5;
  if (has_collideconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->collideconnected(), output);
  }

  // optional .box2d.PbVec2 local_anchor_a = 6;
  if (has_local_anchor_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->local_anchor_a(), output);
  }

  // optional .box2d.PbVec2 local_anchor_b = 7;
  if (has_local_anchor_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->local_anchor_b(), output);
  }

  // optional float ref_angle = 10;
  if (has_ref_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ref_angle(), output);
  }

  // optional bool enable_limit = 12;
  if (has_enable_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_limit(), output);
  }

  // optional float lower_limit = 13;
  if (has_lower_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->lower_limit(), output);
  }

  // optional float upper_limit = 14;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->upper_limit(), output);
  }

  // optional bool enable_motor = 15;
  if (has_enable_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_motor(), output);
  }

  // optional float motor_speed = 16;
  if (has_motor_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->motor_speed(), output);
  }

  // optional float max_motor_torque = 17;
  if (has_max_motor_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->max_motor_torque(), output);
  }

  // optional .box2d.PbVec2 local_axis_a = 20;
  if (has_local_axis_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->local_axis_a(), output);
  }

  // optional float max_motor_force = 21;
  if (has_max_motor_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->max_motor_force(), output);
  }

  // optional float length = 30;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->length(), output);
  }

  // optional float frequency = 31;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->frequency(), output);
  }

  // optional float damping_ratio = 32;
  if (has_damping_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->damping_ratio(), output);
  }

  // optional .box2d.PbVec2 ground_anchor_a = 40;
  if (has_ground_anchor_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->ground_anchor_a(), output);
  }

  // optional .box2d.PbVec2 ground_anchor_b = 41;
  if (has_ground_anchor_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->ground_anchor_b(), output);
  }

  // optional float length_a = 42;
  if (has_length_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->length_a(), output);
  }

  // optional float length_b = 43;
  if (has_length_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->length_b(), output);
  }

  // optional float ratio = 44;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->ratio(), output);
  }

  // optional float max_length_a = 45;
  if (has_max_length_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->max_length_a(), output);
  }

  // optional float max_length_b = 46;
  if (has_max_length_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->max_length_b(), output);
  }

  // optional .box2d.PbVec2 target = 50;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->target(), output);
  }

  // optional float max_force = 51;
  if (has_max_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->max_force(), output);
  }

  // optional int32 joint1 = 61;
  if (has_joint1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->joint1(), output);
  }

  // optional int32 joint2 = 62;
  if (has_joint2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->joint2(), output);
  }

  // optional float spring_frequency = 70;
  if (has_spring_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->spring_frequency(), output);
  }

  // optional float spring_damping_ratio = 71;
  if (has_spring_damping_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->spring_damping_ratio(), output);
  }

  // optional float max_torque = 90;
  if (has_max_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->max_torque(), output);
  }

  // optional float max_length = 100;
  if (has_max_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->max_length(), output);
  }

  // repeated int32 bodies = 110;
  for (int i = 0; i < this->bodies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      110, this->bodies(i), output);
  }

  // repeated int32 joints = 111;
  for (int i = 0; i < this->joints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      111, this->joints(i), output);
  }

  // optional float target_volume = 112;
  if (has_target_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(112, this->target_volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbJoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // required .box2d.PbJointType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 body_a = 3;
  if (has_body_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->body_a(), target);
  }

  // optional int32 body_b = 4;
  if (has_body_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->body_b(), target);
  }

  // optional bool collideConnected = 5;
  if (has_collideconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->collideconnected(), target);
  }

  // optional .box2d.PbVec2 local_anchor_a = 6;
  if (has_local_anchor_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->local_anchor_a(), target);
  }

  // optional .box2d.PbVec2 local_anchor_b = 7;
  if (has_local_anchor_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->local_anchor_b(), target);
  }

  // optional float ref_angle = 10;
  if (has_ref_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ref_angle(), target);
  }

  // optional bool enable_limit = 12;
  if (has_enable_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enable_limit(), target);
  }

  // optional float lower_limit = 13;
  if (has_lower_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->lower_limit(), target);
  }

  // optional float upper_limit = 14;
  if (has_upper_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->upper_limit(), target);
  }

  // optional bool enable_motor = 15;
  if (has_enable_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_motor(), target);
  }

  // optional float motor_speed = 16;
  if (has_motor_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->motor_speed(), target);
  }

  // optional float max_motor_torque = 17;
  if (has_max_motor_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->max_motor_torque(), target);
  }

  // optional .box2d.PbVec2 local_axis_a = 20;
  if (has_local_axis_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->local_axis_a(), target);
  }

  // optional float max_motor_force = 21;
  if (has_max_motor_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->max_motor_force(), target);
  }

  // optional float length = 30;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->length(), target);
  }

  // optional float frequency = 31;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->frequency(), target);
  }

  // optional float damping_ratio = 32;
  if (has_damping_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->damping_ratio(), target);
  }

  // optional .box2d.PbVec2 ground_anchor_a = 40;
  if (has_ground_anchor_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->ground_anchor_a(), target);
  }

  // optional .box2d.PbVec2 ground_anchor_b = 41;
  if (has_ground_anchor_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->ground_anchor_b(), target);
  }

  // optional float length_a = 42;
  if (has_length_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->length_a(), target);
  }

  // optional float length_b = 43;
  if (has_length_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->length_b(), target);
  }

  // optional float ratio = 44;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->ratio(), target);
  }

  // optional float max_length_a = 45;
  if (has_max_length_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->max_length_a(), target);
  }

  // optional float max_length_b = 46;
  if (has_max_length_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->max_length_b(), target);
  }

  // optional .box2d.PbVec2 target = 50;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->target(), target);
  }

  // optional float max_force = 51;
  if (has_max_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->max_force(), target);
  }

  // optional int32 joint1 = 61;
  if (has_joint1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->joint1(), target);
  }

  // optional int32 joint2 = 62;
  if (has_joint2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->joint2(), target);
  }

  // optional float spring_frequency = 70;
  if (has_spring_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->spring_frequency(), target);
  }

  // optional float spring_damping_ratio = 71;
  if (has_spring_damping_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->spring_damping_ratio(), target);
  }

  // optional float max_torque = 90;
  if (has_max_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(90, this->max_torque(), target);
  }

  // optional float max_length = 100;
  if (has_max_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->max_length(), target);
  }

  // repeated int32 bodies = 110;
  for (int i = 0; i < this->bodies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(110, this->bodies(i), target);
  }

  // repeated int32 joints = 111;
  for (int i = 0; i < this->joints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(111, this->joints(i), target);
  }

  // optional float target_volume = 112;
  if (has_target_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(112, this->target_volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbJoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // required .box2d.PbJointType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 body_a = 3;
    if (has_body_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_a());
    }

    // optional int32 body_b = 4;
    if (has_body_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_b());
    }

    // optional bool collideConnected = 5;
    if (has_collideconnected()) {
      total_size += 1 + 1;
    }

    // optional .box2d.PbVec2 local_anchor_a = 6;
    if (has_local_anchor_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_anchor_a());
    }

    // optional .box2d.PbVec2 local_anchor_b = 7;
    if (has_local_anchor_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_anchor_b());
    }

    // optional float ref_angle = 10;
    if (has_ref_angle()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool enable_limit = 12;
    if (has_enable_limit()) {
      total_size += 1 + 1;
    }

    // optional float lower_limit = 13;
    if (has_lower_limit()) {
      total_size += 1 + 4;
    }

    // optional float upper_limit = 14;
    if (has_upper_limit()) {
      total_size += 1 + 4;
    }

    // optional bool enable_motor = 15;
    if (has_enable_motor()) {
      total_size += 1 + 1;
    }

    // optional float motor_speed = 16;
    if (has_motor_speed()) {
      total_size += 2 + 4;
    }

    // optional float max_motor_torque = 17;
    if (has_max_motor_torque()) {
      total_size += 2 + 4;
    }

    // optional .box2d.PbVec2 local_axis_a = 20;
    if (has_local_axis_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_axis_a());
    }

    // optional float max_motor_force = 21;
    if (has_max_motor_force()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float length = 30;
    if (has_length()) {
      total_size += 2 + 4;
    }

    // optional float frequency = 31;
    if (has_frequency()) {
      total_size += 2 + 4;
    }

    // optional float damping_ratio = 32;
    if (has_damping_ratio()) {
      total_size += 2 + 4;
    }

    // optional .box2d.PbVec2 ground_anchor_a = 40;
    if (has_ground_anchor_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ground_anchor_a());
    }

    // optional .box2d.PbVec2 ground_anchor_b = 41;
    if (has_ground_anchor_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ground_anchor_b());
    }

    // optional float length_a = 42;
    if (has_length_a()) {
      total_size += 2 + 4;
    }

    // optional float length_b = 43;
    if (has_length_b()) {
      total_size += 2 + 4;
    }

    // optional float ratio = 44;
    if (has_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float max_length_a = 45;
    if (has_max_length_a()) {
      total_size += 2 + 4;
    }

    // optional float max_length_b = 46;
    if (has_max_length_b()) {
      total_size += 2 + 4;
    }

    // optional .box2d.PbVec2 target = 50;
    if (has_target()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional float max_force = 51;
    if (has_max_force()) {
      total_size += 2 + 4;
    }

    // optional int32 joint1 = 61;
    if (has_joint1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joint1());
    }

    // optional int32 joint2 = 62;
    if (has_joint2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joint2());
    }

    // optional float spring_frequency = 70;
    if (has_spring_frequency()) {
      total_size += 2 + 4;
    }

    // optional float spring_damping_ratio = 71;
    if (has_spring_damping_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float max_torque = 90;
    if (has_max_torque()) {
      total_size += 2 + 4;
    }

    // optional float max_length = 100;
    if (has_max_length()) {
      total_size += 2 + 4;
    }

    // optional float target_volume = 112;
    if (has_target_volume()) {
      total_size += 2 + 4;
    }

  }
  // repeated int32 bodies = 110;
  {
    int data_size = 0;
    for (int i = 0; i < this->bodies_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bodies(i));
    }
    total_size += 2 * this->bodies_size() + data_size;
  }

  // repeated int32 joints = 111;
  {
    int data_size = 0;
    for (int i = 0; i < this->joints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->joints(i));
    }
    total_size += 2 * this->joints_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbJoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbJoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbJoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbJoint::MergeFrom(const PbJoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  bodies_.MergeFrom(from.bodies_);
  joints_.MergeFrom(from.joints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_body_a()) {
      set_body_a(from.body_a());
    }
    if (from.has_body_b()) {
      set_body_b(from.body_b());
    }
    if (from.has_collideconnected()) {
      set_collideconnected(from.collideconnected());
    }
    if (from.has_local_anchor_a()) {
      mutable_local_anchor_a()->::box2d::PbVec2::MergeFrom(from.local_anchor_a());
    }
    if (from.has_local_anchor_b()) {
      mutable_local_anchor_b()->::box2d::PbVec2::MergeFrom(from.local_anchor_b());
    }
    if (from.has_ref_angle()) {
      set_ref_angle(from.ref_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enable_limit()) {
      set_enable_limit(from.enable_limit());
    }
    if (from.has_lower_limit()) {
      set_lower_limit(from.lower_limit());
    }
    if (from.has_upper_limit()) {
      set_upper_limit(from.upper_limit());
    }
    if (from.has_enable_motor()) {
      set_enable_motor(from.enable_motor());
    }
    if (from.has_motor_speed()) {
      set_motor_speed(from.motor_speed());
    }
    if (from.has_max_motor_torque()) {
      set_max_motor_torque(from.max_motor_torque());
    }
    if (from.has_local_axis_a()) {
      mutable_local_axis_a()->::box2d::PbVec2::MergeFrom(from.local_axis_a());
    }
    if (from.has_max_motor_force()) {
      set_max_motor_force(from.max_motor_force());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_damping_ratio()) {
      set_damping_ratio(from.damping_ratio());
    }
    if (from.has_ground_anchor_a()) {
      mutable_ground_anchor_a()->::box2d::PbVec2::MergeFrom(from.ground_anchor_a());
    }
    if (from.has_ground_anchor_b()) {
      mutable_ground_anchor_b()->::box2d::PbVec2::MergeFrom(from.ground_anchor_b());
    }
    if (from.has_length_a()) {
      set_length_a(from.length_a());
    }
    if (from.has_length_b()) {
      set_length_b(from.length_b());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_length_a()) {
      set_max_length_a(from.max_length_a());
    }
    if (from.has_max_length_b()) {
      set_max_length_b(from.max_length_b());
    }
    if (from.has_target()) {
      mutable_target()->::box2d::PbVec2::MergeFrom(from.target());
    }
    if (from.has_max_force()) {
      set_max_force(from.max_force());
    }
    if (from.has_joint1()) {
      set_joint1(from.joint1());
    }
    if (from.has_joint2()) {
      set_joint2(from.joint2());
    }
    if (from.has_spring_frequency()) {
      set_spring_frequency(from.spring_frequency());
    }
    if (from.has_spring_damping_ratio()) {
      set_spring_damping_ratio(from.spring_damping_ratio());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_max_torque()) {
      set_max_torque(from.max_torque());
    }
    if (from.has_max_length()) {
      set_max_length(from.max_length());
    }
    if (from.has_target_volume()) {
      set_target_volume(from.target_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbJoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbJoint::CopyFrom(const PbJoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbJoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_local_anchor_a()) {
    if (!this->local_anchor_a().IsInitialized()) return false;
  }
  if (has_local_anchor_b()) {
    if (!this->local_anchor_b().IsInitialized()) return false;
  }
  if (has_local_axis_a()) {
    if (!this->local_axis_a().IsInitialized()) return false;
  }
  if (has_ground_anchor_a()) {
    if (!this->ground_anchor_a().IsInitialized()) return false;
  }
  if (has_ground_anchor_b()) {
    if (!this->ground_anchor_b().IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void PbJoint::Swap(PbJoint* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(type_, other->type_);
    std::swap(body_a_, other->body_a_);
    std::swap(body_b_, other->body_b_);
    std::swap(collideconnected_, other->collideconnected_);
    std::swap(local_anchor_a_, other->local_anchor_a_);
    std::swap(local_anchor_b_, other->local_anchor_b_);
    std::swap(ref_angle_, other->ref_angle_);
    std::swap(enable_limit_, other->enable_limit_);
    std::swap(lower_limit_, other->lower_limit_);
    std::swap(upper_limit_, other->upper_limit_);
    std::swap(enable_motor_, other->enable_motor_);
    std::swap(motor_speed_, other->motor_speed_);
    std::swap(max_motor_torque_, other->max_motor_torque_);
    std::swap(local_axis_a_, other->local_axis_a_);
    std::swap(max_motor_force_, other->max_motor_force_);
    std::swap(length_, other->length_);
    std::swap(frequency_, other->frequency_);
    std::swap(damping_ratio_, other->damping_ratio_);
    std::swap(ground_anchor_a_, other->ground_anchor_a_);
    std::swap(ground_anchor_b_, other->ground_anchor_b_);
    std::swap(length_a_, other->length_a_);
    std::swap(length_b_, other->length_b_);
    std::swap(ratio_, other->ratio_);
    std::swap(max_length_a_, other->max_length_a_);
    std::swap(max_length_b_, other->max_length_b_);
    std::swap(target_, other->target_);
    std::swap(max_force_, other->max_force_);
    std::swap(joint1_, other->joint1_);
    std::swap(joint2_, other->joint2_);
    std::swap(spring_frequency_, other->spring_frequency_);
    std::swap(spring_damping_ratio_, other->spring_damping_ratio_);
    std::swap(max_torque_, other->max_torque_);
    std::swap(max_length_, other->max_length_);
    bodies_.Swap(&other->bodies_);
    joints_.Swap(&other->joints_);
    std::swap(target_volume_, other->target_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbJoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbJoint_descriptor_;
  metadata.reflection = PbJoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbBody::kTagFieldNumber;
const int PbBody::kTypeFieldNumber;
const int PbBody::kPositionFieldNumber;
const int PbBody::kAngleFieldNumber;
const int PbBody::kLinearVelocityFieldNumber;
const int PbBody::kAngularVelocityFieldNumber;
const int PbBody::kForceFieldNumber;
const int PbBody::kTorqueFieldNumber;
const int PbBody::kMassFieldNumber;
const int PbBody::kIFieldNumber;
const int PbBody::kLinearDampingFieldNumber;
const int PbBody::kAngularDampingFieldNumber;
const int PbBody::kGravityScaleFieldNumber;
const int PbBody::kBulletFieldNumber;
const int PbBody::kAllowSleepFieldNumber;
const int PbBody::kAwakeFieldNumber;
const int PbBody::kActiveFieldNumber;
const int PbBody::kFixedRotationFieldNumber;
const int PbBody::kUUIDFieldNumber;
const int PbBody::kFixturesFieldNumber;
#endif  // !_MSC_VER

PbBody::PbBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbBody::InitAsDefaultInstance() {
  position_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  linear_velocity_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
  force_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
}

PbBody::PbBody(const PbBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbBody::SharedCtor() {
  _cached_size_ = 0;
  tag_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  position_ = NULL;
  angle_ = 0;
  linear_velocity_ = NULL;
  angular_velocity_ = 0;
  force_ = NULL;
  torque_ = 0;
  mass_ = 0;
  i_ = 0;
  linear_damping_ = 0;
  angular_damping_ = 0;
  gravity_scale_ = 0;
  bullet_ = false;
  allow_sleep_ = false;
  awake_ = false;
  active_ = false;
  fixed_rotation_ = false;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbBody::~PbBody() {
  SharedDtor();
}

void PbBody::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete position_;
    delete linear_velocity_;
    delete force_;
  }
}

void PbBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbBody_descriptor_;
}

const PbBody& PbBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbBody* PbBody::default_instance_ = NULL;

PbBody* PbBody::New() const {
  return new PbBody;
}

void PbBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::box2d::PbVec2::Clear();
    }
    angle_ = 0;
    if (has_linear_velocity()) {
      if (linear_velocity_ != NULL) linear_velocity_->::box2d::PbVec2::Clear();
    }
    angular_velocity_ = 0;
    if (has_force()) {
      if (force_ != NULL) force_->::box2d::PbVec2::Clear();
    }
    torque_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mass_ = 0;
    i_ = 0;
    linear_damping_ = 0;
    angular_damping_ = 0;
    gravity_scale_ = 0;
    bullet_ = false;
    allow_sleep_ = false;
    awake_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    active_ = false;
    fixed_rotation_ = false;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  fixtures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .box2d.PbBodyType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::box2d::PbBodyType_IsValid(value)) {
            set_type(static_cast< ::box2d::PbBodyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_position;
        break;
      }

      // optional .box2d.PbVec2 position = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_angle;
        break;
      }

      // optional float angle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_linear_velocity;
        break;
      }

      // optional .box2d.PbVec2 linear_velocity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linear_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_angular_velocity;
        break;
      }

      // optional float angular_velocity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angular_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_velocity_)));
          set_has_angular_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_force;
        break;
      }

      // optional .box2d.PbVec2 force = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_torque;
        break;
      }

      // optional float torque = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_mass;
        break;
      }

      // optional float mass = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_I;
        break;
      }

      // optional float I = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_I:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_linear_damping;
        break;
      }

      // optional float linear_damping = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_linear_damping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_damping_)));
          set_has_linear_damping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_angular_damping;
        break;
      }

      // optional float angular_damping = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angular_damping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_damping_)));
          set_has_angular_damping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(421)) goto parse_gravity_scale;
        break;
      }

      // optional float gravity_scale = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gravity_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravity_scale_)));
          set_has_gravity_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_bullet;
        break;
      }

      // optional bool bullet = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bullet_)));
          set_has_bullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_allow_sleep;
        break;
      }

      // optional bool allow_sleep = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_sleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_sleep_)));
          set_has_allow_sleep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_awake;
        break;
      }

      // optional bool awake = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awake_)));
          set_has_awake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_active;
        break;
      }

      // optional bool active = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_fixed_rotation;
        break;
      }

      // optional bool fixed_rotation = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_rotation_)));
          set_has_fixed_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_UUID;
        break;
      }

      // optional string UUID = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_fixtures;
        break;
      }

      // repeated .box2d.PbFixture fixtures = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixtures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fixtures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_fixtures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // required .box2d.PbBodyType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .box2d.PbVec2 position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->position(), output);
  }

  // optional float angle = 11;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->angle(), output);
  }

  // optional .box2d.PbVec2 linear_velocity = 12;
  if (has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->linear_velocity(), output);
  }

  // optional float angular_velocity = 13;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->angular_velocity(), output);
  }

  // optional .box2d.PbVec2 force = 14;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->force(), output);
  }

  // optional float torque = 15;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->torque(), output);
  }

  // optional float mass = 16;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->mass(), output);
  }

  // optional float I = 17;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->i(), output);
  }

  // optional float linear_damping = 50;
  if (has_linear_damping()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->linear_damping(), output);
  }

  // optional float angular_damping = 51;
  if (has_angular_damping()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->angular_damping(), output);
  }

  // optional float gravity_scale = 52;
  if (has_gravity_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->gravity_scale(), output);
  }

  // optional bool bullet = 53;
  if (has_bullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->bullet(), output);
  }

  // optional bool allow_sleep = 54;
  if (has_allow_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->allow_sleep(), output);
  }

  // optional bool awake = 55;
  if (has_awake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->awake(), output);
  }

  // optional bool active = 56;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->active(), output);
  }

  // optional bool fixed_rotation = 57;
  if (has_fixed_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->fixed_rotation(), output);
  }

  // optional string UUID = 60;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->uuid(), output);
  }

  // repeated .box2d.PbFixture fixtures = 100;
  for (int i = 0; i < this->fixtures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->fixtures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // required .box2d.PbBodyType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .box2d.PbVec2 position = 10;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->position(), target);
  }

  // optional float angle = 11;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->angle(), target);
  }

  // optional .box2d.PbVec2 linear_velocity = 12;
  if (has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->linear_velocity(), target);
  }

  // optional float angular_velocity = 13;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->angular_velocity(), target);
  }

  // optional .box2d.PbVec2 force = 14;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->force(), target);
  }

  // optional float torque = 15;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->torque(), target);
  }

  // optional float mass = 16;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->mass(), target);
  }

  // optional float I = 17;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->i(), target);
  }

  // optional float linear_damping = 50;
  if (has_linear_damping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->linear_damping(), target);
  }

  // optional float angular_damping = 51;
  if (has_angular_damping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->angular_damping(), target);
  }

  // optional float gravity_scale = 52;
  if (has_gravity_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->gravity_scale(), target);
  }

  // optional bool bullet = 53;
  if (has_bullet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->bullet(), target);
  }

  // optional bool allow_sleep = 54;
  if (has_allow_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->allow_sleep(), target);
  }

  // optional bool awake = 55;
  if (has_awake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->awake(), target);
  }

  // optional bool active = 56;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->active(), target);
  }

  // optional bool fixed_rotation = 57;
  if (has_fixed_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->fixed_rotation(), target);
  }

  // optional string UUID = 60;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->uuid(), target);
  }

  // repeated .box2d.PbFixture fixtures = 100;
  for (int i = 0; i < this->fixtures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->fixtures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // required .box2d.PbBodyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .box2d.PbVec2 position = 10;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional float angle = 11;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // optional .box2d.PbVec2 linear_velocity = 12;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_velocity());
    }

    // optional float angular_velocity = 13;
    if (has_angular_velocity()) {
      total_size += 1 + 4;
    }

    // optional .box2d.PbVec2 force = 14;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->force());
    }

    // optional float torque = 15;
    if (has_torque()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float mass = 16;
    if (has_mass()) {
      total_size += 2 + 4;
    }

    // optional float I = 17;
    if (has_i()) {
      total_size += 2 + 4;
    }

    // optional float linear_damping = 50;
    if (has_linear_damping()) {
      total_size += 2 + 4;
    }

    // optional float angular_damping = 51;
    if (has_angular_damping()) {
      total_size += 2 + 4;
    }

    // optional float gravity_scale = 52;
    if (has_gravity_scale()) {
      total_size += 2 + 4;
    }

    // optional bool bullet = 53;
    if (has_bullet()) {
      total_size += 2 + 1;
    }

    // optional bool allow_sleep = 54;
    if (has_allow_sleep()) {
      total_size += 2 + 1;
    }

    // optional bool awake = 55;
    if (has_awake()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool active = 56;
    if (has_active()) {
      total_size += 2 + 1;
    }

    // optional bool fixed_rotation = 57;
    if (has_fixed_rotation()) {
      total_size += 2 + 1;
    }

    // optional string UUID = 60;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  // repeated .box2d.PbFixture fixtures = 100;
  total_size += 2 * this->fixtures_size();
  for (int i = 0; i < this->fixtures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixtures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbBody::MergeFrom(const PbBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  fixtures_.MergeFrom(from.fixtures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::box2d::PbVec2::MergeFrom(from.position());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_linear_velocity()) {
      mutable_linear_velocity()->::box2d::PbVec2::MergeFrom(from.linear_velocity());
    }
    if (from.has_angular_velocity()) {
      set_angular_velocity(from.angular_velocity());
    }
    if (from.has_force()) {
      mutable_force()->::box2d::PbVec2::MergeFrom(from.force());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_linear_damping()) {
      set_linear_damping(from.linear_damping());
    }
    if (from.has_angular_damping()) {
      set_angular_damping(from.angular_damping());
    }
    if (from.has_gravity_scale()) {
      set_gravity_scale(from.gravity_scale());
    }
    if (from.has_bullet()) {
      set_bullet(from.bullet());
    }
    if (from.has_allow_sleep()) {
      set_allow_sleep(from.allow_sleep());
    }
    if (from.has_awake()) {
      set_awake(from.awake());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_fixed_rotation()) {
      set_fixed_rotation(from.fixed_rotation());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbBody::CopyFrom(const PbBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity().IsInitialized()) return false;
  }
  if (has_force()) {
    if (!this->force().IsInitialized()) return false;
  }
  for (int i = 0; i < fixtures_size(); i++) {
    if (!this->fixtures(i).IsInitialized()) return false;
  }
  return true;
}

void PbBody::Swap(PbBody* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(angle_, other->angle_);
    std::swap(linear_velocity_, other->linear_velocity_);
    std::swap(angular_velocity_, other->angular_velocity_);
    std::swap(force_, other->force_);
    std::swap(torque_, other->torque_);
    std::swap(mass_, other->mass_);
    std::swap(i_, other->i_);
    std::swap(linear_damping_, other->linear_damping_);
    std::swap(angular_damping_, other->angular_damping_);
    std::swap(gravity_scale_, other->gravity_scale_);
    std::swap(bullet_, other->bullet_);
    std::swap(allow_sleep_, other->allow_sleep_);
    std::swap(awake_, other->awake_);
    std::swap(active_, other->active_);
    std::swap(fixed_rotation_, other->fixed_rotation_);
    std::swap(uuid_, other->uuid_);
    fixtures_.Swap(&other->fixtures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbBody_descriptor_;
  metadata.reflection = PbBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbWorld::kTagFieldNumber;
const int PbWorld::kGravityFieldNumber;
const int PbWorld::kAllowSleepFieldNumber;
const int PbWorld::kAutoClearForcesFieldNumber;
const int PbWorld::kWarmStartingFieldNumber;
const int PbWorld::kContinuousPhysicsFieldNumber;
const int PbWorld::kSubSteppingFieldNumber;
const int PbWorld::kBodiesFieldNumber;
const int PbWorld::kJointsFieldNumber;
#endif  // !_MSC_VER

PbWorld::PbWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbWorld::InitAsDefaultInstance() {
  gravity_ = const_cast< ::box2d::PbVec2*>(&::box2d::PbVec2::default_instance());
}

PbWorld::PbWorld(const PbWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbWorld::SharedCtor() {
  _cached_size_ = 0;
  tag_ = GOOGLE_LONGLONG(0);
  gravity_ = NULL;
  allow_sleep_ = false;
  auto_clear_forces_ = false;
  warm_starting_ = false;
  continuous_physics_ = false;
  sub_stepping_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbWorld::~PbWorld() {
  SharedDtor();
}

void PbWorld::SharedDtor() {
  if (this != default_instance_) {
    delete gravity_;
  }
}

void PbWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbWorld_descriptor_;
}

const PbWorld& PbWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box2d_2eproto();
  return *default_instance_;
}

PbWorld* PbWorld::default_instance_ = NULL;

PbWorld* PbWorld::New() const {
  return new PbWorld;
}

void PbWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = GOOGLE_LONGLONG(0);
    if (has_gravity()) {
      if (gravity_ != NULL) gravity_->::box2d::PbVec2::Clear();
    }
    allow_sleep_ = false;
    auto_clear_forces_ = false;
    warm_starting_ = false;
    continuous_physics_ = false;
    sub_stepping_ = false;
  }
  bodies_.Clear();
  joints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gravity;
        break;
      }

      // optional .box2d.PbVec2 gravity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gravity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allow_sleep;
        break;
      }

      // optional bool allow_sleep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_sleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_sleep_)));
          set_has_allow_sleep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auto_clear_forces;
        break;
      }

      // optional bool auto_clear_forces = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_clear_forces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_clear_forces_)));
          set_has_auto_clear_forces();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_warm_starting;
        break;
      }

      // optional bool warm_starting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warm_starting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warm_starting_)));
          set_has_warm_starting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_continuous_physics;
        break;
      }

      // optional bool continuous_physics = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuous_physics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuous_physics_)));
          set_has_continuous_physics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sub_stepping;
        break;
      }

      // optional bool sub_stepping = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_stepping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_stepping_)));
          set_has_sub_stepping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bodies;
        break;
      }

      // repeated .box2d.PbBody bodies = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bodies;
        if (input->ExpectTag(170)) goto parse_joints;
        break;
      }

      // repeated .box2d.PbJoint joints = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_joints;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tag(), output);
  }

  // optional .box2d.PbVec2 gravity = 2;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gravity(), output);
  }

  // optional bool allow_sleep = 3;
  if (has_allow_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_sleep(), output);
  }

  // optional bool auto_clear_forces = 4;
  if (has_auto_clear_forces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->auto_clear_forces(), output);
  }

  // optional bool warm_starting = 5;
  if (has_warm_starting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->warm_starting(), output);
  }

  // optional bool continuous_physics = 6;
  if (has_continuous_physics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->continuous_physics(), output);
  }

  // optional bool sub_stepping = 7;
  if (has_sub_stepping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sub_stepping(), output);
  }

  // repeated .box2d.PbBody bodies = 20;
  for (int i = 0; i < this->bodies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bodies(i), output);
  }

  // repeated .box2d.PbJoint joints = 21;
  for (int i = 0; i < this->joints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->joints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tag(), target);
  }

  // optional .box2d.PbVec2 gravity = 2;
  if (has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gravity(), target);
  }

  // optional bool allow_sleep = 3;
  if (has_allow_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allow_sleep(), target);
  }

  // optional bool auto_clear_forces = 4;
  if (has_auto_clear_forces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->auto_clear_forces(), target);
  }

  // optional bool warm_starting = 5;
  if (has_warm_starting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->warm_starting(), target);
  }

  // optional bool continuous_physics = 6;
  if (has_continuous_physics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->continuous_physics(), target);
  }

  // optional bool sub_stepping = 7;
  if (has_sub_stepping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sub_stepping(), target);
  }

  // repeated .box2d.PbBody bodies = 20;
  for (int i = 0; i < this->bodies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bodies(i), target);
  }

  // repeated .box2d.PbJoint joints = 21;
  for (int i = 0; i < this->joints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->joints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag());
    }

    // optional .box2d.PbVec2 gravity = 2;
    if (has_gravity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gravity());
    }

    // optional bool allow_sleep = 3;
    if (has_allow_sleep()) {
      total_size += 1 + 1;
    }

    // optional bool auto_clear_forces = 4;
    if (has_auto_clear_forces()) {
      total_size += 1 + 1;
    }

    // optional bool warm_starting = 5;
    if (has_warm_starting()) {
      total_size += 1 + 1;
    }

    // optional bool continuous_physics = 6;
    if (has_continuous_physics()) {
      total_size += 1 + 1;
    }

    // optional bool sub_stepping = 7;
    if (has_sub_stepping()) {
      total_size += 1 + 1;
    }

  }
  // repeated .box2d.PbBody bodies = 20;
  total_size += 2 * this->bodies_size();
  for (int i = 0; i < this->bodies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodies(i));
  }

  // repeated .box2d.PbJoint joints = 21;
  total_size += 2 * this->joints_size();
  for (int i = 0; i < this->joints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbWorld::MergeFrom(const PbWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  bodies_.MergeFrom(from.bodies_);
  joints_.MergeFrom(from.joints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_gravity()) {
      mutable_gravity()->::box2d::PbVec2::MergeFrom(from.gravity());
    }
    if (from.has_allow_sleep()) {
      set_allow_sleep(from.allow_sleep());
    }
    if (from.has_auto_clear_forces()) {
      set_auto_clear_forces(from.auto_clear_forces());
    }
    if (from.has_warm_starting()) {
      set_warm_starting(from.warm_starting());
    }
    if (from.has_continuous_physics()) {
      set_continuous_physics(from.continuous_physics());
    }
    if (from.has_sub_stepping()) {
      set_sub_stepping(from.sub_stepping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbWorld::CopyFrom(const PbWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbWorld::IsInitialized() const {

  if (has_gravity()) {
    if (!this->gravity().IsInitialized()) return false;
  }
  for (int i = 0; i < bodies_size(); i++) {
    if (!this->bodies(i).IsInitialized()) return false;
  }
  for (int i = 0; i < joints_size(); i++) {
    if (!this->joints(i).IsInitialized()) return false;
  }
  return true;
}

void PbWorld::Swap(PbWorld* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(gravity_, other->gravity_);
    std::swap(allow_sleep_, other->allow_sleep_);
    std::swap(auto_clear_forces_, other->auto_clear_forces_);
    std::swap(warm_starting_, other->warm_starting_);
    std::swap(continuous_physics_, other->continuous_physics_);
    std::swap(sub_stepping_, other->sub_stepping_);
    bodies_.Swap(&other->bodies_);
    joints_.Swap(&other->joints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbWorld_descriptor_;
  metadata.reflection = PbWorld_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace box2d

// @@protoc_insertion_point(global_scope)
