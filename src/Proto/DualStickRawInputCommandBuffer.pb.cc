// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DualStickRawInputCommandBuffer.proto

#include "DualStickRawInputCommandBuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_box2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_box2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PbVec2;
}  // namespace protobuf_box2d_2eproto
namespace redhatgamedev {
namespace srt {
class DualStickRawInputCommandBufferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DualStickRawInputCommandBuffer>
      _instance;
} _DualStickRawInputCommandBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
namespace protobuf_DualStickRawInputCommandBuffer_2eproto {
static void InitDefaultsDualStickRawInputCommandBuffer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::redhatgamedev::srt::_DualStickRawInputCommandBuffer_default_instance_;
    new (ptr) ::redhatgamedev::srt::DualStickRawInputCommandBuffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::redhatgamedev::srt::DualStickRawInputCommandBuffer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DualStickRawInputCommandBuffer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDualStickRawInputCommandBuffer}, {
      &protobuf_box2d_2eproto::scc_info_PbVec2.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DualStickRawInputCommandBuffer.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::DualStickRawInputCommandBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::DualStickRawInputCommandBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::DualStickRawInputCommandBuffer, pbv2move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::DualStickRawInputCommandBuffer, pbv2shoot_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::redhatgamedev::srt::DualStickRawInputCommandBuffer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::redhatgamedev::srt::_DualStickRawInputCommandBuffer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "DualStickRawInputCommandBuffer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$DualStickRawInputCommandBuffer.proto\022\021"
      "redhatgamedev.srt\032\013box2d.proto\"c\n\036DualSt"
      "ickRawInputCommandBuffer\022\037\n\010pbv2Move\030\001 \002"
      "(\0132\r.box2d.PbVec2\022 \n\tpbv2Shoot\030\002 \002(\0132\r.b"
      "ox2d.PbVec2"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DualStickRawInputCommandBuffer.proto", &protobuf_RegisterTypes);
  ::protobuf_box2d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_DualStickRawInputCommandBuffer_2eproto
namespace redhatgamedev {
namespace srt {

// ===================================================================

void DualStickRawInputCommandBuffer::InitAsDefaultInstance() {
  ::redhatgamedev::srt::_DualStickRawInputCommandBuffer_default_instance_._instance.get_mutable()->pbv2move_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::redhatgamedev::srt::_DualStickRawInputCommandBuffer_default_instance_._instance.get_mutable()->pbv2shoot_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
void DualStickRawInputCommandBuffer::clear_pbv2move() {
  if (pbv2move_ != NULL) pbv2move_->Clear();
  clear_has_pbv2move();
}
void DualStickRawInputCommandBuffer::clear_pbv2shoot() {
  if (pbv2shoot_ != NULL) pbv2shoot_->Clear();
  clear_has_pbv2shoot();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DualStickRawInputCommandBuffer::kPbv2MoveFieldNumber;
const int DualStickRawInputCommandBuffer::kPbv2ShootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DualStickRawInputCommandBuffer::DualStickRawInputCommandBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DualStickRawInputCommandBuffer_2eproto::scc_info_DualStickRawInputCommandBuffer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:redhatgamedev.srt.DualStickRawInputCommandBuffer)
}
DualStickRawInputCommandBuffer::DualStickRawInputCommandBuffer(const DualStickRawInputCommandBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pbv2move()) {
    pbv2move_ = new ::box2d::PbVec2(*from.pbv2move_);
  } else {
    pbv2move_ = NULL;
  }
  if (from.has_pbv2shoot()) {
    pbv2shoot_ = new ::box2d::PbVec2(*from.pbv2shoot_);
  } else {
    pbv2shoot_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:redhatgamedev.srt.DualStickRawInputCommandBuffer)
}

void DualStickRawInputCommandBuffer::SharedCtor() {
  ::memset(&pbv2move_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbv2shoot_) -
      reinterpret_cast<char*>(&pbv2move_)) + sizeof(pbv2shoot_));
}

DualStickRawInputCommandBuffer::~DualStickRawInputCommandBuffer() {
  // @@protoc_insertion_point(destructor:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  SharedDtor();
}

void DualStickRawInputCommandBuffer::SharedDtor() {
  if (this != internal_default_instance()) delete pbv2move_;
  if (this != internal_default_instance()) delete pbv2shoot_;
}

void DualStickRawInputCommandBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DualStickRawInputCommandBuffer::descriptor() {
  ::protobuf_DualStickRawInputCommandBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DualStickRawInputCommandBuffer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DualStickRawInputCommandBuffer& DualStickRawInputCommandBuffer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DualStickRawInputCommandBuffer_2eproto::scc_info_DualStickRawInputCommandBuffer.base);
  return *internal_default_instance();
}


void DualStickRawInputCommandBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pbv2move_ != NULL);
      pbv2move_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pbv2shoot_ != NULL);
      pbv2shoot_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DualStickRawInputCommandBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .box2d.PbVec2 pbv2Move = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbv2move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .box2d.PbVec2 pbv2Shoot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbv2shoot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  return false;
#undef DO_
}

void DualStickRawInputCommandBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .box2d.PbVec2 pbv2Move = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pbv2move(), output);
  }

  // required .box2d.PbVec2 pbv2Shoot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pbv2shoot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:redhatgamedev.srt.DualStickRawInputCommandBuffer)
}

::google::protobuf::uint8* DualStickRawInputCommandBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .box2d.PbVec2 pbv2Move = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pbv2move(), deterministic, target);
  }

  // required .box2d.PbVec2 pbv2Shoot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pbv2shoot(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  return target;
}

size_t DualStickRawInputCommandBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  size_t total_size = 0;

  if (has_pbv2move()) {
    // required .box2d.PbVec2 pbv2Move = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbv2move_);
  }

  if (has_pbv2shoot()) {
    // required .box2d.PbVec2 pbv2Shoot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbv2shoot_);
  }

  return total_size;
}
size_t DualStickRawInputCommandBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .box2d.PbVec2 pbv2Move = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbv2move_);

    // required .box2d.PbVec2 pbv2Shoot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbv2shoot_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DualStickRawInputCommandBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const DualStickRawInputCommandBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DualStickRawInputCommandBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:redhatgamedev.srt.DualStickRawInputCommandBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:redhatgamedev.srt.DualStickRawInputCommandBuffer)
    MergeFrom(*source);
  }
}

void DualStickRawInputCommandBuffer::MergeFrom(const DualStickRawInputCommandBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pbv2move()->::box2d::PbVec2::MergeFrom(from.pbv2move());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pbv2shoot()->::box2d::PbVec2::MergeFrom(from.pbv2shoot());
    }
  }
}

void DualStickRawInputCommandBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualStickRawInputCommandBuffer::CopyFrom(const DualStickRawInputCommandBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redhatgamedev.srt.DualStickRawInputCommandBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualStickRawInputCommandBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pbv2move()) {
    if (!this->pbv2move_->IsInitialized()) return false;
  }
  if (has_pbv2shoot()) {
    if (!this->pbv2shoot_->IsInitialized()) return false;
  }
  return true;
}

void DualStickRawInputCommandBuffer::Swap(DualStickRawInputCommandBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DualStickRawInputCommandBuffer::InternalSwap(DualStickRawInputCommandBuffer* other) {
  using std::swap;
  swap(pbv2move_, other->pbv2move_);
  swap(pbv2shoot_, other->pbv2shoot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DualStickRawInputCommandBuffer::GetMetadata() const {
  protobuf_DualStickRawInputCommandBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DualStickRawInputCommandBuffer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srt
}  // namespace redhatgamedev
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::redhatgamedev::srt::DualStickRawInputCommandBuffer* Arena::CreateMaybeMessage< ::redhatgamedev::srt::DualStickRawInputCommandBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::redhatgamedev::srt::DualStickRawInputCommandBuffer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
