// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityGameEventBuffer.proto

#include "EntityGameEventBuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_box2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_box2d_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PbBody;
}  // namespace protobuf_box2d_2eproto
namespace redhatgamedev {
namespace srt {
class EntityGameEventBufferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityGameEventBuffer>
      _instance;
} _EntityGameEventBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
namespace protobuf_EntityGameEventBuffer_2eproto {
static void InitDefaultsEntityGameEventBuffer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::redhatgamedev::srt::_EntityGameEventBuffer_default_instance_;
    new (ptr) ::redhatgamedev::srt::EntityGameEventBuffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::redhatgamedev::srt::EntityGameEventBuffer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EntityGameEventBuffer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEntityGameEventBuffer}, {
      &protobuf_box2d_2eproto::scc_info_PbBody.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EntityGameEventBuffer.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::EntityGameEventBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::EntityGameEventBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::EntityGameEventBuffer, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::EntityGameEventBuffer, entitytag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::EntityGameEventBuffer, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::redhatgamedev::srt::EntityGameEventBuffer, body_),
  3,
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::redhatgamedev::srt::EntityGameEventBuffer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::redhatgamedev::srt::_EntityGameEventBuffer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "EntityGameEventBuffer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033EntityGameEventBuffer.proto\022\021redhatgam"
      "edev.srt\032\013box2d.proto\"\215\002\n\025EntityGameEven"
      "tBuffer\022Y\n\004type\030\001 \002(\0162B.redhatgamedev.sr"
      "t.EntityGameEventBuffer.EntityGameEventB"
      "ufferType:\007UNKNOWN\022\021\n\tentityTag\030\002 \002(\004\022\014\n"
      "\004UUID\030\003 \001(\t\022\033\n\004body\030\004 \001(\0132\r.box2d.PbBody"
      "\"[\n\031EntityGameEventBufferType\022\013\n\007UNKNOWN"
      "\020\000\022\n\n\006CREATE\020\001\022\014\n\010RETRIEVE\020\002\022\n\n\006UPDATE\020\003"
      "\022\013\n\007DESTROY\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EntityGameEventBuffer.proto", &protobuf_RegisterTypes);
  ::protobuf_box2d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_EntityGameEventBuffer_2eproto
namespace redhatgamedev {
namespace srt {
const ::google::protobuf::EnumDescriptor* EntityGameEventBuffer_EntityGameEventBufferType_descriptor() {
  protobuf_EntityGameEventBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EntityGameEventBuffer_2eproto::file_level_enum_descriptors[0];
}
bool EntityGameEventBuffer_EntityGameEventBufferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::UNKNOWN;
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::CREATE;
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::RETRIEVE;
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::UPDATE;
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::DESTROY;
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::EntityGameEventBufferType_MIN;
const EntityGameEventBuffer_EntityGameEventBufferType EntityGameEventBuffer::EntityGameEventBufferType_MAX;
const int EntityGameEventBuffer::EntityGameEventBufferType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EntityGameEventBuffer::InitAsDefaultInstance() {
  ::redhatgamedev::srt::_EntityGameEventBuffer_default_instance_._instance.get_mutable()->body_ = const_cast< ::box2d::PbBody*>(
      ::box2d::PbBody::internal_default_instance());
}
void EntityGameEventBuffer::clear_body() {
  if (body_ != NULL) body_->Clear();
  clear_has_body();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityGameEventBuffer::kTypeFieldNumber;
const int EntityGameEventBuffer::kEntityTagFieldNumber;
const int EntityGameEventBuffer::kUUIDFieldNumber;
const int EntityGameEventBuffer::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityGameEventBuffer::EntityGameEventBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_EntityGameEventBuffer_2eproto::scc_info_EntityGameEventBuffer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:redhatgamedev.srt.EntityGameEventBuffer)
}
EntityGameEventBuffer::EntityGameEventBuffer(const EntityGameEventBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_body()) {
    body_ = new ::box2d::PbBody(*from.body_);
  } else {
    body_ = NULL;
  }
  ::memcpy(&entitytag_, &from.entitytag_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&entitytag_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:redhatgamedev.srt.EntityGameEventBuffer)
}

void EntityGameEventBuffer::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&body_)) + sizeof(type_));
}

EntityGameEventBuffer::~EntityGameEventBuffer() {
  // @@protoc_insertion_point(destructor:redhatgamedev.srt.EntityGameEventBuffer)
  SharedDtor();
}

void EntityGameEventBuffer::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_;
}

void EntityGameEventBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EntityGameEventBuffer::descriptor() {
  ::protobuf_EntityGameEventBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EntityGameEventBuffer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityGameEventBuffer& EntityGameEventBuffer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_EntityGameEventBuffer_2eproto::scc_info_EntityGameEventBuffer.base);
  return *internal_default_instance();
}


void EntityGameEventBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:redhatgamedev.srt.EntityGameEventBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(body_ != NULL);
      body_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&entitytag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&entitytag_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EntityGameEventBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:redhatgamedev.srt.EntityGameEventBuffer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .redhatgamedev.srt.EntityGameEventBuffer.EntityGameEventBufferType type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::redhatgamedev::srt::EntityGameEventBuffer_EntityGameEventBufferType_IsValid(value)) {
            set_type(static_cast< ::redhatgamedev::srt::EntityGameEventBuffer_EntityGameEventBufferType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 entityTag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_entitytag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entitytag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redhatgamedev.srt.EntityGameEventBuffer.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .box2d.PbBody body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:redhatgamedev.srt.EntityGameEventBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:redhatgamedev.srt.EntityGameEventBuffer)
  return false;
#undef DO_
}

void EntityGameEventBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:redhatgamedev.srt.EntityGameEventBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .redhatgamedev.srt.EntityGameEventBuffer.EntityGameEventBufferType type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 entityTag = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entitytag(), output);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redhatgamedev.srt.EntityGameEventBuffer.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // optional .box2d.PbBody body = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:redhatgamedev.srt.EntityGameEventBuffer)
}

::google::protobuf::uint8* EntityGameEventBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:redhatgamedev.srt.EntityGameEventBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .redhatgamedev.srt.EntityGameEventBuffer.EntityGameEventBufferType type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 entityTag = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entitytag(), target);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redhatgamedev.srt.EntityGameEventBuffer.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // optional .box2d.PbBody body = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_body(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redhatgamedev.srt.EntityGameEventBuffer)
  return target;
}

size_t EntityGameEventBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:redhatgamedev.srt.EntityGameEventBuffer)
  size_t total_size = 0;

  if (has_entitytag()) {
    // required uint64 entityTag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entitytag());
  }

  if (has_type()) {
    // required .redhatgamedev.srt.EntityGameEventBuffer.EntityGameEventBufferType type = 1 [default = UNKNOWN];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t EntityGameEventBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redhatgamedev.srt.EntityGameEventBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 entityTag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entitytag());

    // required .redhatgamedev.srt.EntityGameEventBuffer.EntityGameEventBufferType type = 1 [default = UNKNOWN];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UUID = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .box2d.PbBody body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityGameEventBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:redhatgamedev.srt.EntityGameEventBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityGameEventBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityGameEventBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:redhatgamedev.srt.EntityGameEventBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:redhatgamedev.srt.EntityGameEventBuffer)
    MergeFrom(*source);
  }
}

void EntityGameEventBuffer::MergeFrom(const EntityGameEventBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:redhatgamedev.srt.EntityGameEventBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_body()->::box2d::PbBody::MergeFrom(from.body());
    }
    if (cached_has_bits & 0x00000004u) {
      entitytag_ = from.entitytag_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EntityGameEventBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:redhatgamedev.srt.EntityGameEventBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityGameEventBuffer::CopyFrom(const EntityGameEventBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redhatgamedev.srt.EntityGameEventBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityGameEventBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_body()) {
    if (!this->body_->IsInitialized()) return false;
  }
  return true;
}

void EntityGameEventBuffer::Swap(EntityGameEventBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityGameEventBuffer::InternalSwap(EntityGameEventBuffer* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(body_, other->body_);
  swap(entitytag_, other->entitytag_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EntityGameEventBuffer::GetMetadata() const {
  protobuf_EntityGameEventBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EntityGameEventBuffer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srt
}  // namespace redhatgamedev
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::redhatgamedev::srt::EntityGameEventBuffer* Arena::CreateMaybeMessage< ::redhatgamedev::srt::EntityGameEventBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::redhatgamedev::srt::EntityGameEventBuffer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
