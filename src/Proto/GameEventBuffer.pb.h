// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameEventBuffer.proto

#ifndef PROTOBUF_INCLUDED_GameEventBuffer_2eproto
#define PROTOBUF_INCLUDED_GameEventBuffer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "EntityGameEventBuffer.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameEventBuffer_2eproto 

namespace protobuf_GameEventBuffer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameEventBuffer_2eproto
namespace redhatgamedev {
namespace srt {
class GameEventBuffer;
class GameEventBufferDefaultTypeInternal;
extern GameEventBufferDefaultTypeInternal _GameEventBuffer_default_instance_;
class JoinSecurityGameEventBuffer;
class JoinSecurityGameEventBufferDefaultTypeInternal;
extern JoinSecurityGameEventBufferDefaultTypeInternal _JoinSecurityGameEventBuffer_default_instance_;
class LeaveSecurityGameEventBuffer;
class LeaveSecurityGameEventBufferDefaultTypeInternal;
extern LeaveSecurityGameEventBufferDefaultTypeInternal _LeaveSecurityGameEventBuffer_default_instance_;
class SecurityGameEventBuffer;
class SecurityGameEventBufferDefaultTypeInternal;
extern SecurityGameEventBufferDefaultTypeInternal _SecurityGameEventBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
namespace google {
namespace protobuf {
template<> ::redhatgamedev::srt::GameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::GameEventBuffer>(Arena*);
template<> ::redhatgamedev::srt::JoinSecurityGameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::JoinSecurityGameEventBuffer>(Arena*);
template<> ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::LeaveSecurityGameEventBuffer>(Arena*);
template<> ::redhatgamedev::srt::SecurityGameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::SecurityGameEventBuffer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace redhatgamedev {
namespace srt {

enum SecurityGameEventBuffer_SecurityGameEventBufferType {
  SecurityGameEventBuffer_SecurityGameEventBufferType_UNKNOWN = 0,
  SecurityGameEventBuffer_SecurityGameEventBufferType_JOIN = 1,
  SecurityGameEventBuffer_SecurityGameEventBufferType_LEAVE = 2
};
bool SecurityGameEventBuffer_SecurityGameEventBufferType_IsValid(int value);
const SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MIN = SecurityGameEventBuffer_SecurityGameEventBufferType_UNKNOWN;
const SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MAX = SecurityGameEventBuffer_SecurityGameEventBufferType_LEAVE;
const int SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_ARRAYSIZE = SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor();
inline const ::std::string& SecurityGameEventBuffer_SecurityGameEventBufferType_Name(SecurityGameEventBuffer_SecurityGameEventBufferType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor(), value);
}
inline bool SecurityGameEventBuffer_SecurityGameEventBufferType_Parse(
    const ::std::string& name, SecurityGameEventBuffer_SecurityGameEventBufferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityGameEventBuffer_SecurityGameEventBufferType>(
    SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor(), name, value);
}
enum GameEventBuffer_GameEventBufferType {
  GameEventBuffer_GameEventBufferType_UNKNOWN = 0,
  GameEventBuffer_GameEventBufferType_ENTITY = 1,
  GameEventBuffer_GameEventBufferType_SECURITY = 2
};
bool GameEventBuffer_GameEventBufferType_IsValid(int value);
const GameEventBuffer_GameEventBufferType GameEventBuffer_GameEventBufferType_GameEventBufferType_MIN = GameEventBuffer_GameEventBufferType_UNKNOWN;
const GameEventBuffer_GameEventBufferType GameEventBuffer_GameEventBufferType_GameEventBufferType_MAX = GameEventBuffer_GameEventBufferType_SECURITY;
const int GameEventBuffer_GameEventBufferType_GameEventBufferType_ARRAYSIZE = GameEventBuffer_GameEventBufferType_GameEventBufferType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameEventBuffer_GameEventBufferType_descriptor();
inline const ::std::string& GameEventBuffer_GameEventBufferType_Name(GameEventBuffer_GameEventBufferType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameEventBuffer_GameEventBufferType_descriptor(), value);
}
inline bool GameEventBuffer_GameEventBufferType_Parse(
    const ::std::string& name, GameEventBuffer_GameEventBufferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEventBuffer_GameEventBufferType>(
    GameEventBuffer_GameEventBufferType_descriptor(), name, value);
}
// ===================================================================

class JoinSecurityGameEventBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.JoinSecurityGameEventBuffer) */ {
 public:
  JoinSecurityGameEventBuffer();
  virtual ~JoinSecurityGameEventBuffer();

  JoinSecurityGameEventBuffer(const JoinSecurityGameEventBuffer& from);

  inline JoinSecurityGameEventBuffer& operator=(const JoinSecurityGameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinSecurityGameEventBuffer(JoinSecurityGameEventBuffer&& from) noexcept
    : JoinSecurityGameEventBuffer() {
    *this = ::std::move(from);
  }

  inline JoinSecurityGameEventBuffer& operator=(JoinSecurityGameEventBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinSecurityGameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinSecurityGameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const JoinSecurityGameEventBuffer*>(
               &_JoinSecurityGameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JoinSecurityGameEventBuffer* other);
  friend void swap(JoinSecurityGameEventBuffer& a, JoinSecurityGameEventBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinSecurityGameEventBuffer* New() const final {
    return CreateMaybeMessage<JoinSecurityGameEventBuffer>(NULL);
  }

  JoinSecurityGameEventBuffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JoinSecurityGameEventBuffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JoinSecurityGameEventBuffer& from);
  void MergeFrom(const JoinSecurityGameEventBuffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinSecurityGameEventBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UUID = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.JoinSecurityGameEventBuffer)
 private:
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  friend struct ::protobuf_GameEventBuffer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaveSecurityGameEventBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.LeaveSecurityGameEventBuffer) */ {
 public:
  LeaveSecurityGameEventBuffer();
  virtual ~LeaveSecurityGameEventBuffer();

  LeaveSecurityGameEventBuffer(const LeaveSecurityGameEventBuffer& from);

  inline LeaveSecurityGameEventBuffer& operator=(const LeaveSecurityGameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveSecurityGameEventBuffer(LeaveSecurityGameEventBuffer&& from) noexcept
    : LeaveSecurityGameEventBuffer() {
    *this = ::std::move(from);
  }

  inline LeaveSecurityGameEventBuffer& operator=(LeaveSecurityGameEventBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveSecurityGameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveSecurityGameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const LeaveSecurityGameEventBuffer*>(
               &_LeaveSecurityGameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LeaveSecurityGameEventBuffer* other);
  friend void swap(LeaveSecurityGameEventBuffer& a, LeaveSecurityGameEventBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveSecurityGameEventBuffer* New() const final {
    return CreateMaybeMessage<LeaveSecurityGameEventBuffer>(NULL);
  }

  LeaveSecurityGameEventBuffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaveSecurityGameEventBuffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaveSecurityGameEventBuffer& from);
  void MergeFrom(const LeaveSecurityGameEventBuffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveSecurityGameEventBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UUID = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.LeaveSecurityGameEventBuffer)
 private:
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  friend struct ::protobuf_GameEventBuffer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SecurityGameEventBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.SecurityGameEventBuffer) */ {
 public:
  SecurityGameEventBuffer();
  virtual ~SecurityGameEventBuffer();

  SecurityGameEventBuffer(const SecurityGameEventBuffer& from);

  inline SecurityGameEventBuffer& operator=(const SecurityGameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityGameEventBuffer(SecurityGameEventBuffer&& from) noexcept
    : SecurityGameEventBuffer() {
    *this = ::std::move(from);
  }

  inline SecurityGameEventBuffer& operator=(SecurityGameEventBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityGameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityGameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const SecurityGameEventBuffer*>(
               &_SecurityGameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SecurityGameEventBuffer* other);
  friend void swap(SecurityGameEventBuffer& a, SecurityGameEventBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityGameEventBuffer* New() const final {
    return CreateMaybeMessage<SecurityGameEventBuffer>(NULL);
  }

  SecurityGameEventBuffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SecurityGameEventBuffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SecurityGameEventBuffer& from);
  void MergeFrom(const SecurityGameEventBuffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityGameEventBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBufferType;
  static const SecurityGameEventBufferType UNKNOWN =
    SecurityGameEventBuffer_SecurityGameEventBufferType_UNKNOWN;
  static const SecurityGameEventBufferType JOIN =
    SecurityGameEventBuffer_SecurityGameEventBufferType_JOIN;
  static const SecurityGameEventBufferType LEAVE =
    SecurityGameEventBuffer_SecurityGameEventBufferType_LEAVE;
  static inline bool SecurityGameEventBufferType_IsValid(int value) {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_IsValid(value);
  }
  static const SecurityGameEventBufferType SecurityGameEventBufferType_MIN =
    SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MIN;
  static const SecurityGameEventBufferType SecurityGameEventBufferType_MAX =
    SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MAX;
  static const int SecurityGameEventBufferType_ARRAYSIZE =
    SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SecurityGameEventBufferType_descriptor() {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor();
  }
  static inline const ::std::string& SecurityGameEventBufferType_Name(SecurityGameEventBufferType value) {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_Name(value);
  }
  static inline bool SecurityGameEventBufferType_Parse(const ::std::string& name,
      SecurityGameEventBufferType* value) {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .redhatgamedev.srt.JoinSecurityGameEventBuffer joinSecurityGameEventBuffer = 3;
  bool has_joinsecuritygameeventbuffer() const;
  void clear_joinsecuritygameeventbuffer();
  static const int kJoinSecurityGameEventBufferFieldNumber = 3;
  private:
  const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& _internal_joinsecuritygameeventbuffer() const;
  public:
  const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& joinsecuritygameeventbuffer() const;
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* release_joinsecuritygameeventbuffer();
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* mutable_joinsecuritygameeventbuffer();
  void set_allocated_joinsecuritygameeventbuffer(::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer);

  // optional .redhatgamedev.srt.LeaveSecurityGameEventBuffer leaveSecurityGameEventBuffer = 4;
  bool has_leavesecuritygameeventbuffer() const;
  void clear_leavesecuritygameeventbuffer();
  static const int kLeaveSecurityGameEventBufferFieldNumber = 4;
  private:
  const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& _internal_leavesecuritygameeventbuffer() const;
  public:
  const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& leavesecuritygameeventbuffer() const;
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* release_leavesecuritygameeventbuffer();
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* mutable_leavesecuritygameeventbuffer();
  void set_allocated_leavesecuritygameeventbuffer(::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer);

  // required .redhatgamedev.srt.SecurityGameEventBuffer.SecurityGameEventBufferType type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType type() const;
  void set_type(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType value);

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.SecurityGameEventBuffer)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_joinsecuritygameeventbuffer();
  void clear_has_joinsecuritygameeventbuffer();
  void set_has_leavesecuritygameeventbuffer();
  void clear_has_leavesecuritygameeventbuffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer_;
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer_;
  int type_;
  friend struct ::protobuf_GameEventBuffer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEventBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.GameEventBuffer) */ {
 public:
  GameEventBuffer();
  virtual ~GameEventBuffer();

  GameEventBuffer(const GameEventBuffer& from);

  inline GameEventBuffer& operator=(const GameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEventBuffer(GameEventBuffer&& from) noexcept
    : GameEventBuffer() {
    *this = ::std::move(from);
  }

  inline GameEventBuffer& operator=(GameEventBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const GameEventBuffer*>(
               &_GameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameEventBuffer* other);
  friend void swap(GameEventBuffer& a, GameEventBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEventBuffer* New() const final {
    return CreateMaybeMessage<GameEventBuffer>(NULL);
  }

  GameEventBuffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEventBuffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEventBuffer& from);
  void MergeFrom(const GameEventBuffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEventBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameEventBuffer_GameEventBufferType GameEventBufferType;
  static const GameEventBufferType UNKNOWN =
    GameEventBuffer_GameEventBufferType_UNKNOWN;
  static const GameEventBufferType ENTITY =
    GameEventBuffer_GameEventBufferType_ENTITY;
  static const GameEventBufferType SECURITY =
    GameEventBuffer_GameEventBufferType_SECURITY;
  static inline bool GameEventBufferType_IsValid(int value) {
    return GameEventBuffer_GameEventBufferType_IsValid(value);
  }
  static const GameEventBufferType GameEventBufferType_MIN =
    GameEventBuffer_GameEventBufferType_GameEventBufferType_MIN;
  static const GameEventBufferType GameEventBufferType_MAX =
    GameEventBuffer_GameEventBufferType_GameEventBufferType_MAX;
  static const int GameEventBufferType_ARRAYSIZE =
    GameEventBuffer_GameEventBufferType_GameEventBufferType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GameEventBufferType_descriptor() {
    return GameEventBuffer_GameEventBufferType_descriptor();
  }
  static inline const ::std::string& GameEventBufferType_Name(GameEventBufferType value) {
    return GameEventBuffer_GameEventBufferType_Name(value);
  }
  static inline bool GameEventBufferType_Parse(const ::std::string& name,
      GameEventBufferType* value) {
    return GameEventBuffer_GameEventBufferType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .redhatgamedev.srt.EntityGameEventBuffer entityGameEventBuffer = 2;
  bool has_entitygameeventbuffer() const;
  void clear_entitygameeventbuffer();
  static const int kEntityGameEventBufferFieldNumber = 2;
  private:
  const ::redhatgamedev::srt::EntityGameEventBuffer& _internal_entitygameeventbuffer() const;
  public:
  const ::redhatgamedev::srt::EntityGameEventBuffer& entitygameeventbuffer() const;
  ::redhatgamedev::srt::EntityGameEventBuffer* release_entitygameeventbuffer();
  ::redhatgamedev::srt::EntityGameEventBuffer* mutable_entitygameeventbuffer();
  void set_allocated_entitygameeventbuffer(::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer);

  // optional .redhatgamedev.srt.SecurityGameEventBuffer securityGameEventBuffer = 3;
  bool has_securitygameeventbuffer() const;
  void clear_securitygameeventbuffer();
  static const int kSecurityGameEventBufferFieldNumber = 3;
  private:
  const ::redhatgamedev::srt::SecurityGameEventBuffer& _internal_securitygameeventbuffer() const;
  public:
  const ::redhatgamedev::srt::SecurityGameEventBuffer& securitygameeventbuffer() const;
  ::redhatgamedev::srt::SecurityGameEventBuffer* release_securitygameeventbuffer();
  ::redhatgamedev::srt::SecurityGameEventBuffer* mutable_securitygameeventbuffer();
  void set_allocated_securitygameeventbuffer(::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer);

  // required .redhatgamedev.srt.GameEventBuffer.GameEventBufferType type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType type() const;
  void set_type(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType value);

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.GameEventBuffer)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_entitygameeventbuffer();
  void clear_has_entitygameeventbuffer();
  void set_has_securitygameeventbuffer();
  void clear_has_securitygameeventbuffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer_;
  ::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer_;
  int type_;
  friend struct ::protobuf_GameEventBuffer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinSecurityGameEventBuffer

// required string UUID = 1;
inline bool JoinSecurityGameEventBuffer::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinSecurityGameEventBuffer::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinSecurityGameEventBuffer::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinSecurityGameEventBuffer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& JoinSecurityGameEventBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  return uuid_.GetNoArena();
}
inline void JoinSecurityGameEventBuffer::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
#if LANG_CXX11
inline void JoinSecurityGameEventBuffer::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
#endif
inline void JoinSecurityGameEventBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline void JoinSecurityGameEventBuffer::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline ::std::string* JoinSecurityGameEventBuffer::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinSecurityGameEventBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinSecurityGameEventBuffer::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}

// -------------------------------------------------------------------

// LeaveSecurityGameEventBuffer

// required string UUID = 1;
inline bool LeaveSecurityGameEventBuffer::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveSecurityGameEventBuffer::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveSecurityGameEventBuffer::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveSecurityGameEventBuffer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& LeaveSecurityGameEventBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  return uuid_.GetNoArena();
}
inline void LeaveSecurityGameEventBuffer::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
#if LANG_CXX11
inline void LeaveSecurityGameEventBuffer::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
#endif
inline void LeaveSecurityGameEventBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline void LeaveSecurityGameEventBuffer::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline ::std::string* LeaveSecurityGameEventBuffer::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveSecurityGameEventBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveSecurityGameEventBuffer::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}

// -------------------------------------------------------------------

// SecurityGameEventBuffer

// required .redhatgamedev.srt.SecurityGameEventBuffer.SecurityGameEventBufferType type = 1 [default = UNKNOWN];
inline bool SecurityGameEventBuffer::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityGameEventBuffer::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityGameEventBuffer::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityGameEventBuffer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer::type() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityGameEventBuffer.type)
  return static_cast< ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType >(type_);
}
inline void SecurityGameEventBuffer::set_type(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType value) {
  assert(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.SecurityGameEventBuffer.type)
}

// optional .redhatgamedev.srt.JoinSecurityGameEventBuffer joinSecurityGameEventBuffer = 3;
inline bool SecurityGameEventBuffer::has_joinsecuritygameeventbuffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityGameEventBuffer::set_has_joinsecuritygameeventbuffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityGameEventBuffer::clear_has_joinsecuritygameeventbuffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityGameEventBuffer::clear_joinsecuritygameeventbuffer() {
  if (joinsecuritygameeventbuffer_ != NULL) joinsecuritygameeventbuffer_->Clear();
  clear_has_joinsecuritygameeventbuffer();
}
inline const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& SecurityGameEventBuffer::_internal_joinsecuritygameeventbuffer() const {
  return *joinsecuritygameeventbuffer_;
}
inline const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& SecurityGameEventBuffer::joinsecuritygameeventbuffer() const {
  const ::redhatgamedev::srt::JoinSecurityGameEventBuffer* p = joinsecuritygameeventbuffer_;
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
  return p != NULL ? *p : *reinterpret_cast<const ::redhatgamedev::srt::JoinSecurityGameEventBuffer*>(
      &::redhatgamedev::srt::_JoinSecurityGameEventBuffer_default_instance_);
}
inline ::redhatgamedev::srt::JoinSecurityGameEventBuffer* SecurityGameEventBuffer::release_joinsecuritygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
  clear_has_joinsecuritygameeventbuffer();
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* temp = joinsecuritygameeventbuffer_;
  joinsecuritygameeventbuffer_ = NULL;
  return temp;
}
inline ::redhatgamedev::srt::JoinSecurityGameEventBuffer* SecurityGameEventBuffer::mutable_joinsecuritygameeventbuffer() {
  set_has_joinsecuritygameeventbuffer();
  if (joinsecuritygameeventbuffer_ == NULL) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::JoinSecurityGameEventBuffer>(GetArenaNoVirtual());
    joinsecuritygameeventbuffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
  return joinsecuritygameeventbuffer_;
}
inline void SecurityGameEventBuffer::set_allocated_joinsecuritygameeventbuffer(::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete joinsecuritygameeventbuffer_;
  }
  if (joinsecuritygameeventbuffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joinsecuritygameeventbuffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joinsecuritygameeventbuffer, submessage_arena);
    }
    set_has_joinsecuritygameeventbuffer();
  } else {
    clear_has_joinsecuritygameeventbuffer();
  }
  joinsecuritygameeventbuffer_ = joinsecuritygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
}

// optional .redhatgamedev.srt.LeaveSecurityGameEventBuffer leaveSecurityGameEventBuffer = 4;
inline bool SecurityGameEventBuffer::has_leavesecuritygameeventbuffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityGameEventBuffer::set_has_leavesecuritygameeventbuffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityGameEventBuffer::clear_has_leavesecuritygameeventbuffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityGameEventBuffer::clear_leavesecuritygameeventbuffer() {
  if (leavesecuritygameeventbuffer_ != NULL) leavesecuritygameeventbuffer_->Clear();
  clear_has_leavesecuritygameeventbuffer();
}
inline const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& SecurityGameEventBuffer::_internal_leavesecuritygameeventbuffer() const {
  return *leavesecuritygameeventbuffer_;
}
inline const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& SecurityGameEventBuffer::leavesecuritygameeventbuffer() const {
  const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* p = leavesecuritygameeventbuffer_;
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
  return p != NULL ? *p : *reinterpret_cast<const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer*>(
      &::redhatgamedev::srt::_LeaveSecurityGameEventBuffer_default_instance_);
}
inline ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* SecurityGameEventBuffer::release_leavesecuritygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
  clear_has_leavesecuritygameeventbuffer();
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* temp = leavesecuritygameeventbuffer_;
  leavesecuritygameeventbuffer_ = NULL;
  return temp;
}
inline ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* SecurityGameEventBuffer::mutable_leavesecuritygameeventbuffer() {
  set_has_leavesecuritygameeventbuffer();
  if (leavesecuritygameeventbuffer_ == NULL) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::LeaveSecurityGameEventBuffer>(GetArenaNoVirtual());
    leavesecuritygameeventbuffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
  return leavesecuritygameeventbuffer_;
}
inline void SecurityGameEventBuffer::set_allocated_leavesecuritygameeventbuffer(::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leavesecuritygameeventbuffer_;
  }
  if (leavesecuritygameeventbuffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leavesecuritygameeventbuffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leavesecuritygameeventbuffer, submessage_arena);
    }
    set_has_leavesecuritygameeventbuffer();
  } else {
    clear_has_leavesecuritygameeventbuffer();
  }
  leavesecuritygameeventbuffer_ = leavesecuritygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
}

// -------------------------------------------------------------------

// GameEventBuffer

// required .redhatgamedev.srt.GameEventBuffer.GameEventBufferType type = 1 [default = UNKNOWN];
inline bool GameEventBuffer::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEventBuffer::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEventBuffer::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEventBuffer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType GameEventBuffer::type() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.GameEventBuffer.type)
  return static_cast< ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType >(type_);
}
inline void GameEventBuffer::set_type(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType value) {
  assert(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.GameEventBuffer.type)
}

// optional .redhatgamedev.srt.EntityGameEventBuffer entityGameEventBuffer = 2;
inline bool GameEventBuffer::has_entitygameeventbuffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEventBuffer::set_has_entitygameeventbuffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEventBuffer::clear_has_entitygameeventbuffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::redhatgamedev::srt::EntityGameEventBuffer& GameEventBuffer::_internal_entitygameeventbuffer() const {
  return *entitygameeventbuffer_;
}
inline const ::redhatgamedev::srt::EntityGameEventBuffer& GameEventBuffer::entitygameeventbuffer() const {
  const ::redhatgamedev::srt::EntityGameEventBuffer* p = entitygameeventbuffer_;
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
  return p != NULL ? *p : *reinterpret_cast<const ::redhatgamedev::srt::EntityGameEventBuffer*>(
      &::redhatgamedev::srt::_EntityGameEventBuffer_default_instance_);
}
inline ::redhatgamedev::srt::EntityGameEventBuffer* GameEventBuffer::release_entitygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
  clear_has_entitygameeventbuffer();
  ::redhatgamedev::srt::EntityGameEventBuffer* temp = entitygameeventbuffer_;
  entitygameeventbuffer_ = NULL;
  return temp;
}
inline ::redhatgamedev::srt::EntityGameEventBuffer* GameEventBuffer::mutable_entitygameeventbuffer() {
  set_has_entitygameeventbuffer();
  if (entitygameeventbuffer_ == NULL) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::EntityGameEventBuffer>(GetArenaNoVirtual());
    entitygameeventbuffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
  return entitygameeventbuffer_;
}
inline void GameEventBuffer::set_allocated_entitygameeventbuffer(::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entitygameeventbuffer_);
  }
  if (entitygameeventbuffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entitygameeventbuffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entitygameeventbuffer, submessage_arena);
    }
    set_has_entitygameeventbuffer();
  } else {
    clear_has_entitygameeventbuffer();
  }
  entitygameeventbuffer_ = entitygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
}

// optional .redhatgamedev.srt.SecurityGameEventBuffer securityGameEventBuffer = 3;
inline bool GameEventBuffer::has_securitygameeventbuffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEventBuffer::set_has_securitygameeventbuffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEventBuffer::clear_has_securitygameeventbuffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEventBuffer::clear_securitygameeventbuffer() {
  if (securitygameeventbuffer_ != NULL) securitygameeventbuffer_->Clear();
  clear_has_securitygameeventbuffer();
}
inline const ::redhatgamedev::srt::SecurityGameEventBuffer& GameEventBuffer::_internal_securitygameeventbuffer() const {
  return *securitygameeventbuffer_;
}
inline const ::redhatgamedev::srt::SecurityGameEventBuffer& GameEventBuffer::securitygameeventbuffer() const {
  const ::redhatgamedev::srt::SecurityGameEventBuffer* p = securitygameeventbuffer_;
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
  return p != NULL ? *p : *reinterpret_cast<const ::redhatgamedev::srt::SecurityGameEventBuffer*>(
      &::redhatgamedev::srt::_SecurityGameEventBuffer_default_instance_);
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer* GameEventBuffer::release_securitygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
  clear_has_securitygameeventbuffer();
  ::redhatgamedev::srt::SecurityGameEventBuffer* temp = securitygameeventbuffer_;
  securitygameeventbuffer_ = NULL;
  return temp;
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer* GameEventBuffer::mutable_securitygameeventbuffer() {
  set_has_securitygameeventbuffer();
  if (securitygameeventbuffer_ == NULL) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::SecurityGameEventBuffer>(GetArenaNoVirtual());
    securitygameeventbuffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
  return securitygameeventbuffer_;
}
inline void GameEventBuffer::set_allocated_securitygameeventbuffer(::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete securitygameeventbuffer_;
  }
  if (securitygameeventbuffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      securitygameeventbuffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, securitygameeventbuffer, submessage_arena);
    }
    set_has_securitygameeventbuffer();
  } else {
    clear_has_securitygameeventbuffer();
  }
  securitygameeventbuffer_ = securitygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srt
}  // namespace redhatgamedev

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType>() {
  return ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor();
}
template <> struct is_proto_enum< ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType>() {
  return ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameEventBuffer_2eproto
