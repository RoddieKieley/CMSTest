// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RawInputCommandBuffer.proto

#ifndef PROTOBUF_INCLUDED_RawInputCommandBuffer_2eproto
#define PROTOBUF_INCLUDED_RawInputCommandBuffer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DualStickRawInputCommandBuffer.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_RawInputCommandBuffer_2eproto 

namespace protobuf_RawInputCommandBuffer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_RawInputCommandBuffer_2eproto
namespace redhatgamedev {
namespace srt {
class RawInputCommandBuffer;
class RawInputCommandBufferDefaultTypeInternal;
extern RawInputCommandBufferDefaultTypeInternal _RawInputCommandBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
namespace google {
namespace protobuf {
template<> ::redhatgamedev::srt::RawInputCommandBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::RawInputCommandBuffer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace redhatgamedev {
namespace srt {

enum RawInputCommandBuffer_RawInputCommandBufferType {
  RawInputCommandBuffer_RawInputCommandBufferType_UNKNOWN = 0,
  RawInputCommandBuffer_RawInputCommandBufferType_DUALSTICK = 1
};
bool RawInputCommandBuffer_RawInputCommandBufferType_IsValid(int value);
const RawInputCommandBuffer_RawInputCommandBufferType RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_MIN = RawInputCommandBuffer_RawInputCommandBufferType_UNKNOWN;
const RawInputCommandBuffer_RawInputCommandBufferType RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_MAX = RawInputCommandBuffer_RawInputCommandBufferType_DUALSTICK;
const int RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_ARRAYSIZE = RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RawInputCommandBuffer_RawInputCommandBufferType_descriptor();
inline const ::std::string& RawInputCommandBuffer_RawInputCommandBufferType_Name(RawInputCommandBuffer_RawInputCommandBufferType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RawInputCommandBuffer_RawInputCommandBufferType_descriptor(), value);
}
inline bool RawInputCommandBuffer_RawInputCommandBufferType_Parse(
    const ::std::string& name, RawInputCommandBuffer_RawInputCommandBufferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RawInputCommandBuffer_RawInputCommandBufferType>(
    RawInputCommandBuffer_RawInputCommandBufferType_descriptor(), name, value);
}
// ===================================================================

class RawInputCommandBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.RawInputCommandBuffer) */ {
 public:
  RawInputCommandBuffer();
  virtual ~RawInputCommandBuffer();

  RawInputCommandBuffer(const RawInputCommandBuffer& from);

  inline RawInputCommandBuffer& operator=(const RawInputCommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RawInputCommandBuffer(RawInputCommandBuffer&& from) noexcept
    : RawInputCommandBuffer() {
    *this = ::std::move(from);
  }

  inline RawInputCommandBuffer& operator=(RawInputCommandBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawInputCommandBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawInputCommandBuffer* internal_default_instance() {
    return reinterpret_cast<const RawInputCommandBuffer*>(
               &_RawInputCommandBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RawInputCommandBuffer* other);
  friend void swap(RawInputCommandBuffer& a, RawInputCommandBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawInputCommandBuffer* New() const final {
    return CreateMaybeMessage<RawInputCommandBuffer>(NULL);
  }

  RawInputCommandBuffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RawInputCommandBuffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RawInputCommandBuffer& from);
  void MergeFrom(const RawInputCommandBuffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawInputCommandBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RawInputCommandBuffer_RawInputCommandBufferType RawInputCommandBufferType;
  static const RawInputCommandBufferType UNKNOWN =
    RawInputCommandBuffer_RawInputCommandBufferType_UNKNOWN;
  static const RawInputCommandBufferType DUALSTICK =
    RawInputCommandBuffer_RawInputCommandBufferType_DUALSTICK;
  static inline bool RawInputCommandBufferType_IsValid(int value) {
    return RawInputCommandBuffer_RawInputCommandBufferType_IsValid(value);
  }
  static const RawInputCommandBufferType RawInputCommandBufferType_MIN =
    RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_MIN;
  static const RawInputCommandBufferType RawInputCommandBufferType_MAX =
    RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_MAX;
  static const int RawInputCommandBufferType_ARRAYSIZE =
    RawInputCommandBuffer_RawInputCommandBufferType_RawInputCommandBufferType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RawInputCommandBufferType_descriptor() {
    return RawInputCommandBuffer_RawInputCommandBufferType_descriptor();
  }
  static inline const ::std::string& RawInputCommandBufferType_Name(RawInputCommandBufferType value) {
    return RawInputCommandBuffer_RawInputCommandBufferType_Name(value);
  }
  static inline bool RawInputCommandBufferType_Parse(const ::std::string& name,
      RawInputCommandBufferType* value) {
    return RawInputCommandBuffer_RawInputCommandBufferType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string UUID = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional .redhatgamedev.srt.DualStickRawInputCommandBuffer dualStickRawInputCommandBuffer = 3;
  bool has_dualstickrawinputcommandbuffer() const;
  void clear_dualstickrawinputcommandbuffer();
  static const int kDualStickRawInputCommandBufferFieldNumber = 3;
  private:
  const ::redhatgamedev::srt::DualStickRawInputCommandBuffer& _internal_dualstickrawinputcommandbuffer() const;
  public:
  const ::redhatgamedev::srt::DualStickRawInputCommandBuffer& dualstickrawinputcommandbuffer() const;
  ::redhatgamedev::srt::DualStickRawInputCommandBuffer* release_dualstickrawinputcommandbuffer();
  ::redhatgamedev::srt::DualStickRawInputCommandBuffer* mutable_dualstickrawinputcommandbuffer();
  void set_allocated_dualstickrawinputcommandbuffer(::redhatgamedev::srt::DualStickRawInputCommandBuffer* dualstickrawinputcommandbuffer);

  // required .redhatgamedev.srt.RawInputCommandBuffer.RawInputCommandBufferType type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType type() const;
  void set_type(::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType value);

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.RawInputCommandBuffer)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_dualstickrawinputcommandbuffer();
  void clear_has_dualstickrawinputcommandbuffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::redhatgamedev::srt::DualStickRawInputCommandBuffer* dualstickrawinputcommandbuffer_;
  int type_;
  friend struct ::protobuf_RawInputCommandBuffer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawInputCommandBuffer

// required .redhatgamedev.srt.RawInputCommandBuffer.RawInputCommandBufferType type = 1 [default = UNKNOWN];
inline bool RawInputCommandBuffer::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawInputCommandBuffer::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawInputCommandBuffer::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawInputCommandBuffer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType RawInputCommandBuffer::type() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.RawInputCommandBuffer.type)
  return static_cast< ::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType >(type_);
}
inline void RawInputCommandBuffer::set_type(::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType value) {
  assert(::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.RawInputCommandBuffer.type)
}

// required string UUID = 2;
inline bool RawInputCommandBuffer::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawInputCommandBuffer::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawInputCommandBuffer::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawInputCommandBuffer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& RawInputCommandBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.RawInputCommandBuffer.UUID)
  return uuid_.GetNoArena();
}
inline void RawInputCommandBuffer::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.RawInputCommandBuffer.UUID)
}
#if LANG_CXX11
inline void RawInputCommandBuffer::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.RawInputCommandBuffer.UUID)
}
#endif
inline void RawInputCommandBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.RawInputCommandBuffer.UUID)
}
inline void RawInputCommandBuffer::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.RawInputCommandBuffer.UUID)
}
inline ::std::string* RawInputCommandBuffer::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.RawInputCommandBuffer.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawInputCommandBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.RawInputCommandBuffer.UUID)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawInputCommandBuffer::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.RawInputCommandBuffer.UUID)
}

// optional .redhatgamedev.srt.DualStickRawInputCommandBuffer dualStickRawInputCommandBuffer = 3;
inline bool RawInputCommandBuffer::has_dualstickrawinputcommandbuffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawInputCommandBuffer::set_has_dualstickrawinputcommandbuffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawInputCommandBuffer::clear_has_dualstickrawinputcommandbuffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::redhatgamedev::srt::DualStickRawInputCommandBuffer& RawInputCommandBuffer::_internal_dualstickrawinputcommandbuffer() const {
  return *dualstickrawinputcommandbuffer_;
}
inline const ::redhatgamedev::srt::DualStickRawInputCommandBuffer& RawInputCommandBuffer::dualstickrawinputcommandbuffer() const {
  const ::redhatgamedev::srt::DualStickRawInputCommandBuffer* p = dualstickrawinputcommandbuffer_;
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.RawInputCommandBuffer.dualStickRawInputCommandBuffer)
  return p != NULL ? *p : *reinterpret_cast<const ::redhatgamedev::srt::DualStickRawInputCommandBuffer*>(
      &::redhatgamedev::srt::_DualStickRawInputCommandBuffer_default_instance_);
}
inline ::redhatgamedev::srt::DualStickRawInputCommandBuffer* RawInputCommandBuffer::release_dualstickrawinputcommandbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.RawInputCommandBuffer.dualStickRawInputCommandBuffer)
  clear_has_dualstickrawinputcommandbuffer();
  ::redhatgamedev::srt::DualStickRawInputCommandBuffer* temp = dualstickrawinputcommandbuffer_;
  dualstickrawinputcommandbuffer_ = NULL;
  return temp;
}
inline ::redhatgamedev::srt::DualStickRawInputCommandBuffer* RawInputCommandBuffer::mutable_dualstickrawinputcommandbuffer() {
  set_has_dualstickrawinputcommandbuffer();
  if (dualstickrawinputcommandbuffer_ == NULL) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::DualStickRawInputCommandBuffer>(GetArenaNoVirtual());
    dualstickrawinputcommandbuffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.RawInputCommandBuffer.dualStickRawInputCommandBuffer)
  return dualstickrawinputcommandbuffer_;
}
inline void RawInputCommandBuffer::set_allocated_dualstickrawinputcommandbuffer(::redhatgamedev::srt::DualStickRawInputCommandBuffer* dualstickrawinputcommandbuffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dualstickrawinputcommandbuffer_);
  }
  if (dualstickrawinputcommandbuffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dualstickrawinputcommandbuffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dualstickrawinputcommandbuffer, submessage_arena);
    }
    set_has_dualstickrawinputcommandbuffer();
  } else {
    clear_has_dualstickrawinputcommandbuffer();
  }
  dualstickrawinputcommandbuffer_ = dualstickrawinputcommandbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.RawInputCommandBuffer.dualStickRawInputCommandBuffer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace srt
}  // namespace redhatgamedev

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType>() {
  return ::redhatgamedev::srt::RawInputCommandBuffer_RawInputCommandBufferType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_RawInputCommandBuffer_2eproto
